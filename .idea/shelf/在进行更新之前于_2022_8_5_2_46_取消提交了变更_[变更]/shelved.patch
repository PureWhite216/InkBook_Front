Index: src/store/modules/poster/poster.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import * as MTS from './poster.mutations'\r\n// import { Message } from 'element-ui'\r\nimport { Widget, BackgroundWidget, CopiedWidget } from 'poster/widgetConstructor'\r\nimport { arrMoveTop, arrMoveUpper, arrMoveLower, arrMoveBottom } from 'poster/utils'\r\nimport { isPlainObject } from '@/utils'\r\nimport _set from 'lodash/set'\r\nimport { changeCompositionPositionHandler } from './helpers'\r\nimport history from './history'\r\nimport backup from './backup'\r\nimport { addActivityPageConfig } from '@/api/activity'\r\nimport { Message } from 'element-ui'\r\n\r\nfunction getState() {\r\n    const state = {\r\n        activityId: '',\r\n        pageConfigId: '',\r\n        pageTitle: '',\r\n        canvasSize: {\r\n            width: 338,\r\n            height: 600\r\n        },\r\n        canvasPosition: {\r\n            top: null,\r\n            left: null\r\n        },\r\n        background: null,\r\n        posterItems: [], // 组件列表\r\n        activeItems: [], // 当前选中的组件\r\n        assistWidgets: [], // 辅助组件\r\n        layerPanelOpened: true, // 是否打开图层面板\r\n        referenceLineOpened: true, // 是否打开参考线\r\n        copiedWidgets: null, // 当前复制的组件 WidgetItem[]\r\n        referenceLine: { // 参考线,用户定义的参考线\r\n            row: [],\r\n            col: []\r\n        },\r\n        matchedLine: null, // 匹配到的参考线 {row:[],col:[]}\r\n        mainPanelScrollY: 0,\r\n        isUnsavedState: false // 是否处于未保存状态\r\n    }\r\n    return state\r\n}\r\n\r\nconst state = getState()\r\n\r\nconst getters = {\r\n    posterItemIds(state, getters) {\r\n        return state.posterItems.map(item => item.id)\r\n    },\r\n    activeItemIds(state) {\r\n        return state.activeItems.map(item => item.id)\r\n    },\r\n    canvasSize(state) {\r\n        return state.canvasSize\r\n    },\r\n    activityId(state) {\r\n        return state.activityId\r\n    }\r\n}\r\n\r\nconst mutations = {\r\n    [MTS.SET_ACTIVITY_ID](state, id) {\r\n        state.activityId = id\r\n    },\r\n    [MTS.SET_PAGE_CONFIG_ID](state, id) {\r\n        state.pageConfigId = id\r\n    },\r\n    [MTS.SET_PAGE_TITLE](state, title) {\r\n        state.pageTitle = title\r\n        state.isUnsavedState = true\r\n    },\r\n    'SET_SCROLL_Y'(state, y) {\r\n        state.mainPanelScrollY = y\r\n    },\r\n    [MTS.SET_CANVAS_POSITION](state, data) {\r\n        state.canvasPosition = data\r\n    },\r\n    [MTS.ADD_BACKGROUND](state, item) {\r\n        if (item instanceof BackgroundWidget) {\r\n            state.background = item\r\n        }\r\n    },\r\n    [MTS.REMOVE_BACKGROUND](state) {\r\n        state.background = new BackgroundWidget()\r\n    },\r\n    [MTS.SET_BACKGROUND_CONFIG](state, cb) {\r\n        if (state.background) {\r\n            cb(state.background)\r\n        }\r\n    },\r\n    // 添加组件\r\n    [MTS.ADD_ITEM](state, item) {\r\n        if (item instanceof Widget) {\r\n            state.posterItems.push(item)\r\n        }\r\n    },\r\n    // 删除组件\r\n    [MTS.REMOVE_ITEM](state, item) {\r\n        if (item.lock) {\r\n            return\r\n        }\r\n        state.posterItems = state.posterItems.filter(i => i.id !== item.id)\r\n    },\r\n    // 替换所有items\r\n    [MTS.REPLACE_POSTER_ITEMS](state, items) {\r\n        state.posterItems = items\r\n    },\r\n    // 添加选中的组件\r\n    [MTS.ADD_ACTIVE_ITEM](state, item) {\r\n        if (item.lock || !item.visible || !item.couldAddToActive) {\r\n            return\r\n        }\r\n        state.activeItems.push(item)\r\n    },\r\n    // 取消选中\r\n    [MTS.REMOVE_ACTIVE_ITEM](state, item) {\r\n        state.activeItems = state.activeItems.filter(i => i.id !== item.id)\r\n    },\r\n    // 替换选中的组件\r\n    [MTS.REPLACE_ACTIVE_ITEMS](state, items) {\r\n        state.activeItems = items.filter(i => (!i.lock) && i.couldAddToActive)\r\n    },\r\n    // 添加辅助组件\r\n    [MTS.ADD_ASSIST_WIDGET](state, item) {\r\n        state.assistWidgets.push(item)\r\n    },\r\n    // 删除辅助组件\r\n    [MTS.REMOVE_ASSIST_WIDGET](state, item) {\r\n        state.assistWidgets = state.assistWidgets.filter(i => i.id !== item.id)\r\n    },\r\n    // 替换辅助组件\r\n    [MTS.REPLACE_ASSIST_WIDGETS](state, items) {\r\n        state.assistWidgets = items\r\n    },\r\n    // 设置图层面板的打开关闭状态\r\n    [MTS.SET_LAYER_PANEL](state, flag) {\r\n        state.layerPanelOpened = !!flag\r\n    },\r\n    // 设置参考线的可见状态\r\n    [MTS.SET_REFERENCE_LINE_VISIBLE](state, flag) {\r\n        state.referenceLineOpened = !!flag\r\n    },\r\n    // 设置某个组件的data\r\n    [MTS.SET_WIDGET_CONFIG](state, { item, cb }) {\r\n        const target = state.posterItems.find(i => i.id === item.id)\r\n        if (target && cb) {\r\n            cb(target)\r\n        }\r\n    },\r\n    // 复制组件\r\n    [MTS.COPY_WIDGET](state, item) {\r\n        const items = Array.isArray(item) ? item : [item]\r\n        const finalItems = items\r\n            .filter(i => i && i.replicable)\r\n            .map(i => {\r\n                i._copyCount = 0\r\n                return i\r\n            })\r\n        state.copiedWidgets = finalItems.length > 0 ? finalItems : null\r\n    },\r\n    // 粘贴组件\r\n    [MTS.PASTE_WIDGET](state) {\r\n        const copiedWidgets = state.copiedWidgets\r\n        if (copiedWidgets && copiedWidgets.length > 0) {\r\n            copiedWidgets.forEach(item => {\r\n                state.posterItems.push(new CopiedWidget(item))\r\n            })\r\n        }\r\n    },\r\n    // 添加参考线\r\n    [MTS.ADD_REFERENCE_LINE](state, { type, position }) {\r\n        state.referenceLine[type].push(position)\r\n    },\r\n    // 删除参考线\r\n    [MTS.REMOVE_REFERENCE_LINE](state, { type, index }) {\r\n        state.referenceLine[type].splice(index, 1)\r\n    },\r\n    // 清空参考线\r\n    [MTS.REMOVE_ALL_REFERENCE_LINE](state) {\r\n        state.referenceLine = {\r\n            row: [],\r\n            col: []\r\n        }\r\n    },\r\n    [MTS.SET_MATCHED_LINE](state, data) {\r\n        state.matchedLine = data\r\n    },\r\n    [MTS.REMOVE_MATCHED_LINE](state) {\r\n        state.matchedLine = null\r\n    },\r\n    [MTS.SET_UNSAVED_STATE](state, flag = false) {\r\n        state.isUnsavedState = flag\r\n    }\r\n\r\n}\r\n\r\nconst actions = {\r\n    resetState({ state, dispatch }) {\r\n        return new Promise((resolve) => {\r\n            for (const [key, val] of Object.entries(getState())) {\r\n                state[key] = val\r\n            }\r\n            dispatch('backup/resetState')\r\n            dispatch('history/resetState')\r\n            setTimeout(() => {\r\n                resolve()\r\n            }, 500)\r\n        })\r\n    },\r\n    setUnsavedState({ commit }, flag) {\r\n        commit(MTS.SET_UNSAVED_STATE, flag)\r\n    },\r\n    setCanvasSize({ state, dispatch }, data) {\r\n        // dispatch('history/push')\r\n        state.canvasSize = data\r\n    },\r\n    addBackground({ state, commit, dispatch }, item) {\r\n        if (state.background) {\r\n            dispatch('history/push')\r\n        }\r\n        commit(MTS.ADD_BACKGROUND, item)\r\n    },\r\n    removeBackground({ commit, dispatch }) {\r\n        dispatch('history/push')\r\n        commit(MTS.REMOVE_BACKGROUND)\r\n    },\r\n    setBackgroundConfig({ state, commit, dispatch }, cb) {\r\n        dispatch('history/push')\r\n        commit(MTS.SET_BACKGROUND_CONFIG, cb)\r\n    },\r\n    seekBackgroundSize({ state }) {\r\n        const background = state.background\r\n        if (background && background.wState.isSolid) {\r\n            background.dragInfo.w = state.canvasSize.width\r\n            background.dragInfo.h = state.canvasSize.height\r\n        }\r\n    },\r\n    addItem({ commit, dispatch, state }, item) {\r\n        const widgetCountLimit = parseInt(item._widgetCountLimit)\r\n        if (widgetCountLimit) {\r\n            const currentCount = (state.posterItems.filter(i => i.type === item.type)).length\r\n            if (currentCount >= widgetCountLimit) {\r\n                Message.error(`<${item.typeLabel || item.type}>类型的组件最多有${widgetCountLimit}个`)\r\n                return\r\n            }\r\n        }\r\n        if (item instanceof Widget) {\r\n            dispatch('history/push')\r\n            if (!(item instanceof CopiedWidget)) {\r\n                commit(MTS.REPLACE_ACTIVE_ITEMS, [item])\r\n            }\r\n            commit(MTS.ADD_ITEM, item)\r\n        }\r\n    },\r\n    removeItem({ commit, getters, dispatch }, item) {\r\n        if (item.lock) {\r\n            return\r\n        }\r\n        if (getters.activeItemIds.includes(item.id)) {\r\n            commit(MTS.REMOVE_ACTIVE_ITEM, item)\r\n        }\r\n        dispatch('history/push')\r\n        commit(MTS.REMOVE_ITEM, item)\r\n    },\r\n    replacePosterItems({ commit, dispatch }, items) {\r\n        dispatch('history/push')\r\n        commit(MTS.REPLACE_POSTER_ITEMS, items)\r\n        commit(MTS.REPLACE_ACTIVE_ITEMS, [])\r\n    },\r\n    addActiveItem({ commit, getters, dispatch }, item) {\r\n        if (getters.activeItemIds.includes(item.id)) {\r\n            return\r\n        }\r\n        commit(MTS.ADD_ACTIVE_ITEM, item)\r\n    },\r\n    removeActiveItem({ commit, dispatch }, item) {\r\n        commit(MTS.REMOVE_ACTIVE_ITEM, item)\r\n    },\r\n    replaceActiveItems({ commit }, items) {\r\n        commit(MTS.REPLACE_ACTIVE_ITEMS, items)\r\n    },\r\n    addAssistWidget({ commit }, item) {\r\n        // dispatch('history/push')\r\n        commit(MTS.ADD_ASSIST_WIDGET, item)\r\n    },\r\n    removeAssistWidget({ commit }, item) {\r\n        // dispatch('history/push')\r\n        commit(MTS.REMOVE_ASSIST_WIDGET, item)\r\n    },\r\n    replaceAssistWidgets({ commit }, items) {\r\n        // dispatch('history/push')\r\n        commit(MTS.REPLACE_ASSIST_WIDGETS, items)\r\n    },\r\n    selectAllItems({ commit, state }) {\r\n        commit(MTS.REPLACE_ACTIVE_ITEMS, state.posterItems)\r\n    },\r\n    setLayerPanel({ commit }, flag) {\r\n        commit(MTS.SET_LAYER_PANEL, flag)\r\n    },\r\n    updateBackgroundDragInfo({ state }, dragInfo) {\r\n        state.background.dragInfo = Object.assign({}, state.background.dragInfo, dragInfo)\r\n    },\r\n    // 更新组件位置、大小等\r\n    updateDragInfo({ state }, { dragInfo, widgetId, updateSelfOnly = false }) {\r\n        const widgetItem = state.posterItems.find(i => i.id === widgetId)\r\n        if (!widgetItem) {\r\n            return\r\n        }\r\n        // if (isMoving) {\r\n        const preDragInfo = widgetItem.dragInfo\r\n        const activeItems = state.activeItems\r\n        dragInfo = Object.assign({}, preDragInfo, dragInfo)\r\n        if (updateSelfOnly) {\r\n            widgetItem.dragInfo = Object.assign({}, widgetItem.dragInfo, dragInfo)\r\n        } else if (activeItems.length > 0) {\r\n            const diffDragInfo = {\r\n                w: dragInfo.w - preDragInfo.w,\r\n                h: dragInfo.h - preDragInfo.h,\r\n                x: dragInfo.x - preDragInfo.x,\r\n                y: dragInfo.y - preDragInfo.y,\r\n                rotateZ: dragInfo.rotateZ - preDragInfo.rotateZ\r\n            }\r\n            activeItems.forEach(item => {\r\n                const { x, y, w, h, rotateZ } = item.dragInfo\r\n                item.dragInfo = {\r\n                    x: x + diffDragInfo.x,\r\n                    y: y + diffDragInfo.y,\r\n                    w: w + diffDragInfo.w,\r\n                    h: h + diffDragInfo.h,\r\n                    rotateZ: rotateZ + diffDragInfo.rotateZ\r\n                }\r\n            })\r\n        }\r\n        // } else {\r\n        //     widgetItem.dragInfo = Object.assign({}, widgetItem.dragInfo, dragInfo)\r\n        // }\r\n    },\r\n    // 更新组件state\r\n    updateWidgetState({ state, dispatch }, { keyPath, value, widgetId, pushHistory = true }) {\r\n        const widgetItem = state.posterItems.find(i => i.id === widgetId)\r\n        if (widgetItem) {\r\n            // 某些操作不添加进历史记录栈\r\n            if (pushHistory) {\r\n                dispatch('history/push')\r\n            }\r\n            _set(widgetItem.wState, keyPath, value)\r\n        }\r\n    },\r\n    // 更改组合的位置\r\n    changeCompositionPosition({ state, dispatch }, type) {\r\n        const activeItems = state.activeItems\r\n        dispatch('history/push')\r\n        /**\r\n         * @sideEffect\r\n         */\r\n        changeCompositionPositionHandler(activeItems, type, state.canvasSize)\r\n    },\r\n    setWidgetConfig({ commit }, { item, cb }) {\r\n        commit(MTS.SET_WIDGET_CONFIG, { item, cb })\r\n    },\r\n    lockItem({ commit, getters }, item) {\r\n        if (getters.activeItemIds.includes(item.id)) {\r\n            commit(MTS.REMOVE_ACTIVE_ITEM, item)\r\n        }\r\n        commit(MTS.SET_WIDGET_CONFIG, { item, cb: (i) => (i.lock = true) })\r\n    },\r\n    unlockItem({ commit }, item) {\r\n        commit(MTS.SET_WIDGET_CONFIG, { item, cb: (i) => (i.lock = false) })\r\n    },\r\n    toggleItemVisible({ commit }, { item, visible }) {\r\n        commit(MTS.SET_WIDGET_CONFIG, { item, cb: (i) => (i.visible = !!visible) })\r\n    },\r\n    widgetMoveToTop({ commit, state, dispatch }, item) {\r\n        dispatch('history/push')\r\n        commit(\r\n            MTS.REPLACE_POSTER_ITEMS,\r\n            arrMoveBottom(state.posterItems, state.posterItems.findIndex(i => i.id === item.id))\r\n        )\r\n    },\r\n    widgetMoveToUpper({ commit, state, dispatch }, item) {\r\n        dispatch('history/push')\r\n        commit(\r\n            MTS.REPLACE_POSTER_ITEMS,\r\n            arrMoveLower(state.posterItems, state.posterItems.findIndex(i => i.id === item.id))\r\n        )\r\n    },\r\n    widgetMoveToLower({ commit, state, dispatch }, item) {\r\n        dispatch('history/push')\r\n        commit(\r\n            MTS.REPLACE_POSTER_ITEMS,\r\n            arrMoveUpper(state.posterItems, state.posterItems.findIndex(i => i.id === item.id))\r\n        )\r\n    },\r\n    widgetMoveToBottom({ commit, state, dispatch }, item) {\r\n        dispatch('history/push')\r\n        commit(\r\n            MTS.REPLACE_POSTER_ITEMS,\r\n            arrMoveTop(state.posterItems, state.posterItems.findIndex(i => i.id === item.id))\r\n        )\r\n    },\r\n    copyWidget({ commit }, item) {\r\n        commit(MTS.COPY_WIDGET, item)\r\n    },\r\n    pasteWidget({ commit, dispatch }) {\r\n        dispatch('history/push')\r\n        commit(MTS.PASTE_WIDGET)\r\n    },\r\n    addReferenceLine({ commit, dispatch }, item) {\r\n        dispatch('history/push')\r\n        commit(MTS.ADD_REFERENCE_LINE, item)\r\n    },\r\n    removeReferenceLine({ commit, dispatch }, item) {\r\n        dispatch('history/push')\r\n        commit(MTS.REMOVE_REFERENCE_LINE, item)\r\n    },\r\n    removeAllReferenceLine({ commit, dispatch }) {\r\n        dispatch('history/push')\r\n        commit(MTS.REMOVE_ALL_REFERENCE_LINE)\r\n    },\r\n    setReferenceLineVisible({ commit }, flag) {\r\n        commit(MTS.SET_REFERENCE_LINE_VISIBLE, flag)\r\n    },\r\n    setMatchedLine({ commit }, data) {\r\n        commit(MTS.SET_MATCHED_LINE, data)\r\n    },\r\n    removeMatchedLine({ commit }) {\r\n        commit(MTS.REMOVE_MATCHED_LINE)\r\n    },\r\n    /**\r\n     * 更新当前页面配置\r\n     * 参数pageConfig是从后台获取到的页面配置信息\r\n     */\r\n    updatePageConfig({ dispatch, state, commit }, pageConfig) {\r\n        let recoverData = {}\r\n        if (!pageConfig || !isPlainObject(pageConfig)) {\r\n            commit(MTS.SET_PAGE_CONFIG_ID, '')\r\n            recoverData = {\r\n                background: new BackgroundWidget(),\r\n                posterItems: [],\r\n                referenceLine: getState().referenceLine\r\n            }\r\n        } else {\r\n            commit(MTS.SET_PAGE_CONFIG_ID, pageConfig.pageConfigId)\r\n            const baseConfig = JSON.parse(pageConfig.config)\r\n            const posterItems = pageConfig.items\r\n            let background\r\n            try {\r\n                const backgroundItem = posterItems.splice(\r\n                    posterItems.findIndex(i => i.type === 'background'), 1\r\n                )[0]\r\n                if (backgroundItem) {\r\n                    background = JSON.parse(backgroundItem.config)\r\n                }\r\n            } catch (e) {\r\n                console.error(e)\r\n                background = new BackgroundWidget()\r\n            }\r\n            const defaultState = getState()\r\n            recoverData = {\r\n                background,\r\n                posterItems: posterItems.map(item => JSON.parse(item.config)),\r\n                referenceLine: baseConfig.referenceLine || defaultState.referenceLine,\r\n                canvasSize: baseConfig.canvasSize || defaultState.canvasSize,\r\n                pageTitle: pageConfig.title || ''\r\n            }\r\n        }\r\n        dispatch('backup/recover', recoverData)\r\n        commit(MTS.SET_UNSAVED_STATE, false)\r\n    },\r\n    /**\r\n     * 保存/新增当前的活动页配置\r\n     */\r\n    saveActivityPageConfig({ state, commit, rootGetters }) {\r\n        const requestData = {\r\n            title: state.pageTitle,\r\n            // baseConfig\r\n            config: JSON.stringify({\r\n                referenceLine: state.referenceLine,\r\n                canvasSize: state.canvasSize\r\n            }),\r\n            items: [\r\n                {\r\n                    type: state.background.type,\r\n                    content: '',\r\n                    config: JSON.stringify(state.background)\r\n                },\r\n                ...state.posterItems.map((item, index) => {\r\n                    return {\r\n                        type: item.type,\r\n                        content: '',\r\n                        config: JSON.stringify({\r\n                            ...item,\r\n                            _sort: index + 1\r\n                        })\r\n                    }\r\n                })\r\n            ]\r\n        }\r\n        return addActivityPageConfig(requestData).then(\r\n            res => {\r\n                Message.success('保存成功')\r\n                commit(MTS.SET_UNSAVED_STATE, false)\r\n                return res\r\n            },\r\n            () => {\r\n                Message.error('保存失败')\r\n                return Promise.reject()\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport default {\r\n    namespaced: true,\r\n    state,\r\n    getters,\r\n    mutations,\r\n    actions,\r\n    modules: {\r\n        history,\r\n        backup\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/store/modules/poster/poster.js b/src/store/modules/poster/poster.js
--- a/src/store/modules/poster/poster.js	(revision f7a7a46cf8660adc3bb17b2f9167da0370d0892e)
+++ b/src/store/modules/poster/poster.js	(date 1659638684002)
@@ -7,8 +7,10 @@
 import { changeCompositionPositionHandler } from './helpers'
 import history from './history'
 import backup from './backup'
-import { addActivityPageConfig } from '@/api/activity'
+// import { addActivityPageConfig } from '@/api/activity'
 import { Message } from 'element-ui'
+import qs from 'qs'
+import axios from 'axios'
 
 function getState() {
     const state = {
@@ -496,16 +498,23 @@
                 })
             ]
         }
-        return addActivityPageConfig(requestData).then(
-            res => {
-                Message.success('保存成功')
-                commit(MTS.SET_UNSAVED_STATE, false)
-                return res
-            },
-            () => {
-                Message.error('保存失败')
-                return Promise.reject()
-            }
+      const form_saveAxure = {
+        token: localStorage.getItem('Token'),
+        axure_id: localStorage.getItem('axure_id'),
+        title: requestData['title'],
+        items: JSON.stringify(requestData['items']),
+        config: requestData['config']
+      }
+      console.log(form_saveAxure)
+     return axios.post('/axure/update', qs.stringify(form_saveAxure))
+        .then(res => {
+            Message.success('保存成功')
+            return res
+          },
+          () => {
+            Message.error('保存失败')
+            return Promise.reject()
+          }
         )
     }
 }
Index: src/views/list/table-group-project.vue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><template>\r\n  <div class=\"main-container\">\r\n    <TableHeader :can-collapsed=\"false\">\r\n      <template slot=\"left\">\r\n        <el-button\r\n          slot=\"reference\"\r\n          class=\"back-button\"\r\n          float=\"left\"\r\n          @click=\"toProject()\"\r\n        >\r\n          <i class=\"el-icon-back\"></i>\r\n        </el-button>\r\n        <p id=\"projectName\" class=\"projecttitle\">\r\n          {{ project_name }}\r\n        </p>\r\n        <p id=\"teamName\" class=\"teamtitle\">\r\n          该项目属于团队{{ team_name }}\r\n        </p>\r\n      </template>\r\n\r\n      <template slot=\"right\">\r\n        <el-popover\r\n          v-model=\"visible\"\r\n          placement=\"top\"\r\n          width=\"350\"\r\n        >\r\n          <el-button\r\n            slot=\"reference\"\r\n            class=\"button-style\"\r\n            @click=\"dialogWordVisible = true\"\r\n          >创建文档\r\n            <i class=\"el-icon-plus\"></i>\r\n          </el-button>\r\n        </el-popover>\r\n\r\n        <el-popover\r\n          v-model=\"visible\"\r\n          placement=\"top\"\r\n          width=\"350\"\r\n          trigger=\"click\"\r\n        >\r\n          <el-button\r\n            slot=\"reference\"\r\n            class=\"button-style\"\r\n            @click=\"dialogPageVisible = true\"\r\n          >创建原型\r\n            <i class=\"el-icon-plus\"></i>\r\n          </el-button>\r\n        </el-popover>\r\n\r\n        <el-popover\r\n          v-model=\"visible\"\r\n          placement=\"top\"\r\n          width=\"350\"\r\n        >\r\n          <el-button\r\n            slot=\"reference\"\r\n            class=\"button-style\"\r\n            @click=\"createUML()\"\r\n          >创建uml\r\n            <i class=\"el-icon-plus\"></i>\r\n          </el-button>\r\n        </el-popover>\r\n\r\n        <el-popover\r\n          v-model=\"visible\"\r\n          placement=\"top\"\r\n          width=\"350\"\r\n        >\r\n          <el-button\r\n            slot=\"reference\"\r\n            class=\"spcbutton-style\"\r\n          ><el-dropdown trigger=\"click\" @command=\"onCommad\">\r\n            <div class=\"action-wrapper\" style=\"font-size: 16px ;font-weight: bold\">\r\n              <i class=\"el-icon-setting\"></i>\r\n              设置\r\n            </div>\r\n            <el-dropdown-menu slot=\"dropdown\">\r\n              <el-dropdown-item icon=\"el-icon-edit-outline\" command=\"personalCenter\">\r\n                <el-button type=\"text\" @click=\"dialogUpdateProjectVisible = true\">重命名</el-button>\r\n              </el-dropdown-item>\r\n              <el-dropdown-item icon=\"el-icon-switch-button\" command=\"logout\">\r\n                <el-button type=\"text\" style=\"color: red\" @click=\"deleteProject\">删除项目</el-button>\r\n              </el-dropdown-item>\r\n            </el-dropdown-menu>\r\n          </el-dropdown>\r\n          </el-button>\r\n        </el-popover>\r\n      </template>\r\n    </TableHeader>\r\n    <el-dialog title=\"创建文档\" :visible.sync=\"dialogWordVisible\">\r\n      <el-form :model=\"form_word\">\r\n        <el-form-item label=\"文档名称\" :label-width=\"formLabelWidth\">\r\n          <el-input v-model=\"form_word.doc_name\" autocomplete=\"off\" />\r\n        </el-form-item>\r\n        <el-form-item label=\"文档简介（可不填）\" :label-width=\"formLabelWidth\">\r\n          <el-input v-model=\"form_word.doc_description\" autocomplete=\"off\" />\r\n        </el-form-item>\r\n      </el-form>\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"dialogWordVisible = false; form_word.doc_name = '' \">取 消</el-button>\r\n        <el-button @click=\"dialogWordVisible = false; createWord()\">确 定</el-button>\r\n      </div>\r\n    </el-dialog>\r\n\r\n    <el-dialog title=\"创建原型\" :visible.sync=\"dialogPageVisible\">\r\n      <el-form :model=\"form_page\">\r\n        <el-form-item label=\"原型名称\" :label-width=\"formLabelWidth\">\r\n          <el-input v-model=\"form_createAxure.axure_name\" autocomplete=\"off\" />\r\n        </el-form-item>\r\n        <el-form-item label=\"原型简介（可不填）\" :label-width=\"formLabelWidth\">\r\n          <el-input v-model=\"form_createAxure.axure_info\" autocomplete=\"off\" />\r\n        </el-form-item>\r\n      </el-form>\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"dialogPageVisible = false; form_page.page_name = '' \">取 消</el-button>\r\n        <el-button @click=\"createAxure(), dialogPageVisible = false\">确 定</el-button>\r\n      </div>\r\n    </el-dialog>\r\n\r\n    <el-dialog title=\"修改项目信息\" :visible.sync=\"dialogUpdateProjectVisible\">\r\n      <el-form :model=\"form_project\">\r\n        <el-form-item label=\"项目新名称\" :label-width=\"formLabelWidth\">\r\n          <el-input v-model=\"form_updateProject.project_name\" autocomplete=\"off\" />\r\n        </el-form-item>\r\n        <el-form-item label=\"项目新简介（可不填）\" :label-width=\"formLabelWidth\">\r\n          <el-input v-model=\"form_updateProject.project_info\" autocomplete=\"off\" />\r\n        </el-form-item>\r\n      </el-form>\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"dialogUpdateProjectVisible = false; form_updateProject.project_name = '' \">取 消</el-button>\r\n        <el-button @click=\"updateProject(), dialogUpdateProjectVisible = false\">确 定</el-button>\r\n      </div>\r\n    </el-dialog>\r\n\r\n    <el-dialog title=\"修改文档信息\" :visible.sync=\"dialogUpdateDocInfoVisible\">\r\n      <el-form :model=\"form_updateDocInfo\">\r\n        <el-form-item label=\"文档新名称\" :label-width=\"formLabelWidth\">\r\n          <el-input v-model=\"form_updateDocInfo.doc_name\" autocomplete=\"off\" />\r\n        </el-form-item>\r\n        <el-form-item label=\"文档新简介（可不填）\" :label-width=\"formLabelWidth\">\r\n          <el-input v-model=\"form_updateDocInfo.doc_description\" autocomplete=\"off\" />\r\n        </el-form-item>\r\n      </el-form>\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"dialogUpdateDocInfoVisible = false\">取 消</el-button>\r\n        <el-button @click=\"updateDocInfo(), dialogUpdateDocInfoVisible = false\">确 定</el-button>\r\n      </div>\r\n    </el-dialog>\r\n    <TableBody ref=\"tableBody\" class=\"temptablebody\">\r\n      <template>\r\n        <el-tabs :tab-position=\"top\" style=\"height: 200px;\" class=\"messagecss\">\r\n          <el-tab-pane>\r\n            <span slot=\"label\" class=\"fontClass\" style=\"font-size: large; color: #2c2c2c\">文档</span>\r\n            <el-table\r\n              ref=\"table\"\r\n              v-loading=\"tableloading\"\r\n              class=\"table-custom\"\r\n              :data=\"docList\"\r\n              :header-cell-style=\"tableConfig.headerCellStyle\"\r\n              :cell-style=\"tableConfig.cellStyle\"\r\n              :size=\"tableConfig.size\"\r\n              @selection-change=\"handleSelectionChange\"\r\n              @row-dblclick=\"toDocEditor\"\r\n            >\r\n              <el-table-column\r\n                type=\"selection\"\r\n                width=\"45\"\r\n              />\r\n              <el-table-column\r\n                align=\"center\"\r\n                label=\"名称\"\r\n                prop=\"doc_name\"\r\n                width=\"250px\"\r\n              />\r\n              <el-table-column\r\n                align=\"center\"\r\n                label=\"更新时间\"\r\n                prop=\"last_edit_time\"\r\n                width=\"250px\"\r\n              />\r\n              <el-table-column\r\n                align=\"center\"\r\n                label=\"创建者\"\r\n                prop=\"creator_name\"\r\n                width=\"200px\"\r\n              />\r\n              <el-table-column\r\n                align=\"center\"\r\n                label=\"操作\"\r\n                width=\"200\"\r\n              >\r\n                <template slot-scope=\"scope\">\r\n                  <el-dropdown trigger=\"click\" @command=\"onCommad\">\r\n                    <div class=\"action-wrapper\">\r\n                      <span class=\"nick-name el-dropdown-link\">\r\n                        <i class=\"el-icon-more\"></i>\r\n                      </span>\r\n                    </div>\r\n                    <el-dropdown-menu slot=\"dropdown\">\r\n                      <el-dropdown-item icon=\"el-icon-edit-outline\" command=\"personalCenter\">\r\n                        <el-button type=\"text\" @click=\"form_updateDocInfo.doc_id = scope.row.doc_id, dialogUpdateDocInfoVisible = true\">重命名</el-button>\r\n                      </el-dropdown-item>\r\n                      <el-dropdown-item icon=\"el-icon-switch-button\" command=\"logout\">\r\n                        <el-button type=\"text\" @click=\"form_deleteDoc.doc_id = scope.row.doc_id, deleteDoc()\">删除文件</el-button>\r\n                      </el-dropdown-item>\r\n                    </el-dropdown-menu>\r\n                  </el-dropdown>\r\n                </template>\r\n              </el-table-column>\r\n            </el-table>\r\n          </el-tab-pane>\r\n          <el-tab-pane>\r\n            <span slot=\"label\" class=\"fontClass\" style=\"font-size: large; color: #2c2c2c\">原型</span>\r\n            <el-table\r\n              ref=\"table\"\r\n              v-loading=\"loading\"\r\n              class=\"table-custom\"\r\n              :data=\"axureList\"\r\n              :header-cell-style=\"tableConfig.headerCellStyle\"\r\n              :size=\"tableConfig.size\"\r\n              @selection-change=\"handleSelectionChange\"\r\n              @row-dblclick=\"toAxureEditor\"\r\n            >\r\n              <el-table-column\r\n                type=\"selection\"\r\n                width=\"45\"\r\n              />\r\n              <el-table-column\r\n                align=\"center\"\r\n                label=\"名称\"\r\n                prop=\"axure_name\"\r\n                width=\"250px\"\r\n              />\r\n              <el-table-column\r\n                align=\"center\"\r\n                label=\"更新时间\"\r\n                prop=\"updatetime\"\r\n                width=\"250px\"\r\n              />\r\n              <el-table-column\r\n                align=\"center\"\r\n                label=\"创建者\"\r\n                prop=\"user\"\r\n                width=\"200px\"\r\n              />\r\n              <el-table-column\r\n                align=\"center\"\r\n                label=\"操作\"\r\n                width=\"200\"\r\n              >\r\n                <template slot-scope=\"scope\">\r\n                  <el-dropdown trigger=\"click\" @command=\"onCommad\">\r\n                    <div class=\"action-wrapper\">\r\n                      <span class=\"nick-name el-dropdown-link\">\r\n                        <i class=\"el-icon-more\"></i>\r\n                      </span>\r\n                    </div>\r\n                    <el-dropdown-menu slot=\"dropdown\">\r\n                      <el-dropdown-item icon=\"el-icon-edit-outline\" command=\"personalCenter\">\r\n                        <el-button type=\"text\" @click=\"form_updateDocInfo.doc_id = scope.row.doc_id, dialogUpdateDocInfoVisible = true\">重命名</el-button>\r\n                      </el-dropdown-item>\r\n                      <el-dropdown-item icon=\"el-icon-switch-button\" command=\"logout\">\r\n                        <el-button type=\"text\">删除文件</el-button>\r\n                      </el-dropdown-item>\r\n                    </el-dropdown-menu>\r\n                  </el-dropdown>\r\n                </template>\r\n              </el-table-column>\r\n            </el-table>\r\n          </el-tab-pane>\r\n        </el-tabs>\r\n      </template>\r\n    </TableBody>\r\n    <TableBody ref=\"tableBody\" class=\"rightside\">\r\n      <template>\r\n        <div class=\"rightsidefont\">\r\n          About\r\n        </div>\r\n        <el-divider />\r\n        <div>\r\n          <span>{{ project_info }}</span>\r\n          <el-divider />\r\n        </div>\r\n      </template>\r\n    </TableBody>\r\n\r\n    <!--    <TableFooter-->\r\n    <!--      :page-size=\"pageModel.pageSize\"-->\r\n    <!--      :total-size=\"pageModel.totalSize\"-->\r\n    <!--      @pageSizeChanged=\"pageSizeChanged\"-->\r\n    <!--      @currentChanged=\"currentChanged\"-->\r\n    <!--      @onRefresh=\"doRefresh\"-->\r\n    <!--    />-->\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport TableMixin, { PageModelMixin } from '@/mixins/TableMixin'\r\nimport {\r\n  GetDataMixin,\r\n  AddItemMixin,\r\n  DeleteItemsMixin,\r\n  UpdateItemMixin,\r\n  RefreshActionMixin\r\n} from '@/mixins/ActionMixin'\r\nimport SingleUpload from '@/components/common/SingleUpload.vue'\r\nimport BaseForm from '@/components/common/BaseForm.vue'\r\nimport draggable from '@/directive/draggable'\r\nimport store from '@/layouts/store'\r\nimport qs from 'qs'\r\nimport { getters } from '@/store/modules/user.js'\r\nimport { state } from '@/store/modules/user.js'\r\nimport router from '@/router'\r\nexport default {\r\n  name: 'TableGroupMember',\r\n  // eslint-disable-next-line vue/no-unused-components\r\n  components: { SingleUpload, BaseForm },\r\n  directives: { draggable },\r\n  mixins: [\r\n    TableMixin,\r\n    PageModelMixin,\r\n    GetDataMixin,\r\n    AddItemMixin,\r\n    DeleteItemsMixin,\r\n    UpdateItemMixin,\r\n    RefreshActionMixin\r\n  ],\r\n  data() {\r\n    return {\r\n      visible_setPerm: true,\r\n      loading: false,\r\n      form_createAxure: {\r\n        token: getters.getToken(state),\r\n        axure_name: null,\r\n        axure_info: null,\r\n        project_id: localStorage.getItem('project_id')\r\n      },\r\n      form_getAxureList: {\r\n        token: getters.getToken(state),\r\n        project_id: localStorage.getItem('project_id')\r\n      },\r\n      form_deleteDoc: {\r\n        token: getters.getToken(state),\r\n        doc_id: null\r\n      },\r\n      form_updateDocInfo: {\r\n        token: getters.getToken(state),\r\n        doc_id: null,\r\n        doc_name: null,\r\n        doc_description: null\r\n      },\r\n      form_deleteProject: {\r\n        token: getters.getToken(state),\r\n        user_id: getters.getUserId(state),\r\n        project_id: localStorage.getItem('project_id')\r\n      },\r\n      form_updateProject: {\r\n        token: getters.getToken(state),\r\n        user_id: getters.getUserId(state),\r\n        project_id: localStorage.getItem('project_id'),\r\n        project_name: '',\r\n        project_info: ''\r\n      },\r\n      form_member: {\r\n        token: getters.getToken(state),\r\n        username: getters.getUserName(state),\r\n        user_id: getters.getUserId(state),\r\n        team_id: Number(localStorage.getItem('team_id'))\r\n      },\r\n      project_info: localStorage.getItem('project_info'),\r\n      visible: false,\r\n      form_word: {\r\n        token: getters.getToken(state),\r\n        project_id: localStorage.getItem('project_id'),\r\n        doc_name: '',\r\n        doc_description: ''\r\n      },\r\n      form_page: {\r\n        token: getters.getToken(state),\r\n        username: getters.getUserName(state),\r\n        page_name: '',\r\n        team_id: Number(localStorage.getItem('team_id'))\r\n      },\r\n      form_getDocInfo: {\r\n        token: getters.getToken(state),\r\n        doc_id: localStorage.getItem('doc_id')\r\n      },\r\n      form_deleteMember: {\r\n        token: getters.getToken(state),\r\n        username: getters.getUserName(state),\r\n        user_id: getters.getUserId(state),\r\n        team_id: Number(localStorage.getItem('team_id')),\r\n        deleted_id: null\r\n      },\r\n      form_quitTeam: {\r\n        token: getters.getToken(state),\r\n        username: getters.getUserName(state),\r\n        user_id: getters.getUserId(state),\r\n        team_id: Number(localStorage.getItem('team_id'))\r\n      },\r\n      form_setPerm: {\r\n        token: getters.getToken(state),\r\n        username: getters.getUserName(state),\r\n        user_id: getters.getUserId(state),\r\n        team_id: Number(localStorage.getItem('team_id')),\r\n        member_id: 0,\r\n        perm: null\r\n      },\r\n      project_name: localStorage.getItem('project_name'),\r\n      team_name: localStorage.getItem('team_name'),\r\n      dialogWordVisible: false,\r\n      dialogPageVisible: false,\r\n      dialogMethodVisible: false,\r\n      dialogUpdateProjectVisible: false,\r\n      dialogUpdateDocInfoVisible: false,\r\n      axureList: [],\r\n      deleteMemberList: [],\r\n      docList: [],\r\n      powerOptions: [\r\n        {\r\n          value: 1,\r\n          label: '队长'\r\n        },\r\n        {\r\n          value: 2,\r\n          label: '开发者'\r\n        },\r\n        {\r\n          value: 3,\r\n          label: '观察者'\r\n        }\r\n      ],\r\n      userModel: {\r\n        address: '',\r\n        avatar: '',\r\n        gender: 1,\r\n        id: 1,\r\n        lastLoginIp: '',\r\n        lastLoginTime: '',\r\n        nickName: '',\r\n        status: 0,\r\n        vip: 1\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    this.getDocList()\r\n    this.getAxureList()\r\n    localStorage.setItem('flag', 'user')\r\n    localStorage.setItem('enable', 'true')\r\n  },\r\n  methods: {\r\n    toAxureEditor(val) {\r\n      localStorage.setItem('axure_id', val.axure_id)\r\n      localStorage.setItem('axure_name', val.axure_name)\r\n      localStorage.setItem('axure_info', val.axure_info)\r\n      this.$router.push('/posterEditor')\r\n    },\r\n    createAxure() {\r\n      this.$axios.post('/axure/create', qs.stringify(this.form_createAxure))\r\n         .then((res) => {\r\n           if (res.data.success) {\r\n             this.$message.success(res.data.message)\r\n             this.getAxureList()\r\n           } else {\r\n             this.$message.error(res.data.message)\r\n           }\r\n         })\r\n    },\r\n    getAxureList() {\r\n      this.loading = true\r\n      this.axureList = []\r\n      this.$axios.post('/axure/getAxureList', qs.stringify(this.form_getAxureList))\r\n        .then((res) => {\r\n          if (res.data.success) {\r\n            for (let i = 0; i < res.data.data.length; i++) {\r\n              const axures = {\r\n                axure_info: null,\r\n                axure_id: null,\r\n                project_id: null,\r\n                axure_name: null,\r\n                title: null,\r\n                config: null,\r\n                items: null\r\n              }\r\n              axures.axure_info = res.data.data[i].axure_info\r\n              axures.axure_id = res.data.data[i].axure_id\r\n              axures.project_id = res.data.data[i].project_id\r\n              axures.axure_name = res.data.data[i].axure_name\r\n              axures.title = res.data.data[i].title\r\n              axures.config = res.data.data[i].config\r\n              axures.items = res.data.data[i].items\r\n              let flag = 0\r\n              for (let i = 0; i < this.axureList.length; i++) {\r\n                if (this.axureList[i].axure_id === axures.axure_id) {\r\n                  flag = 1\r\n                  break\r\n                }\r\n              }\r\n              if (!flag) { this.axureList.push(axures) }\r\n              // this.$message.success(res.data.message)\r\n            }\r\n          } else {\r\n             this.$message.error(res.data.message)\r\n          }\r\n           this.loading = false\r\n         })\r\n    },\r\n    toDocEditor(val) {\r\n      localStorage.setItem('doc_id', val.doc_id)\r\n      localStorage.setItem('doc_name', val.doc_name)\r\n      this.$axios.get('/doc/getDocInfo', {\r\n        params: {\r\n          token: getters.getToken(state),\r\n          doc_id: localStorage.getItem('doc_id')\r\n        }\r\n      })\r\n      .then(res => {\r\n        if (res.data.success) {\r\n          localStorage.setItem('doc_content', res.data.data.doc_content)\r\n        } else {\r\n          this.$message.error(res.data.message)\r\n        }\r\n      })\r\n      this.$router.push('/editor/rich-text')\r\n    },\r\n    deleteDoc() {\r\n      this.$confirm('此操作将使您删除此文档' + ', 是否继续?', '提示', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n    }).then(() => {\r\n      this.$axios.post('/doc/deleteDoc', qs.stringify(this.form_deleteDoc))\r\n        .then((res) => {\r\n          // console.log(5)\r\n          if (res.data.success) {\r\n            this.$message.success(res.data.message)\r\n            this.getDocList()\r\n          } else {\r\n            this.$message.error(res.data.message)\r\n          }\r\n        })\r\n      }).catch(() => {\r\n        this.$message({\r\n          type: 'info',\r\n          message: '已取消操作'\r\n        })\r\n      })\r\n    },\r\n    updateDocInfo() {\r\n      this.$axios.post('/doc/updateDocInfo', qs.stringify(this.form_updateDocInfo))\r\n        .then((res) => {\r\n          // console.log(5)\r\n          if (res.data.success) {\r\n            this.$message.success(res.data.message)\r\n            this.getDocList()\r\n          } else {\r\n            this.$message.error(res.data.message)\r\n          }\r\n        })\r\n    },\r\n    deleteProject() {\r\n      this.$confirm('此操作将使您删除此项目' + ', 是否继续?', '提示', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n    }).then(() => {\r\n      this.$axios.post('/project/delete', qs.stringify(this.form_deleteProject))\r\n        .then((res) => {\r\n          // console.log(5)\r\n          if (res.data.success) {\r\n            this.$message.success(res.data.message)\r\n            this.toProject()\r\n          } else {\r\n            this.$message.error(res.data.message)\r\n          }\r\n        })\r\n      }).catch(() => {\r\n        this.$message({\r\n          type: 'info',\r\n          message: '已取消操作'\r\n        })\r\n      })\r\n    },\r\n    updateProject() {\r\n      // this.form_updateProject.project_id = item.project_id\r\n      this.$axios.post('/project/update', qs.stringify(this.form_updateProject))\r\n        .then((res) => {\r\n          // console.log(5)\r\n          if (res.data.success) {\r\n            this.$message.success(res.data.message)\r\n            this.project_name = this.form_updateProject.project_name\r\n            this.project_info = this.form_updateProject.project_info\r\n          } else {\r\n            this.$message.error(res.data.message)\r\n          }\r\n        })\r\n    },\r\n    getDocList() {\r\n      this.docList = []\r\n      this.$axios.get('/doc/getDocList', {\r\n              params: {\r\n                token: getters.getToken(state),\r\n                project_id: localStorage.getItem('project_id')\r\n              }\r\n            })\r\n            .then(res => {\r\n              if (res.data.success) {\r\n                for (let i = 0; i < res.data.data.length; i++) {\r\n              const docs = {\r\n                doc_name: null,\r\n                last_edit_time: null,\r\n                project_id: null,\r\n                doc_description: null,\r\n                creator_id: null,\r\n                doc_content: null,\r\n                creator_name: null,\r\n                doc_id: null\r\n              }\r\n              docs.doc_name = res.data.data[i].doc_name\r\n              docs.last_edit_time = res.data.data[i].last_edit_time\r\n              docs.project_id = res.data.data[i].project_id\r\n              docs.doc_description = res.data.data[i].doc_description\r\n              docs.creator_id = res.data.data[i].creator_id\r\n              docs.doc_content = res.data.data[i].doc_content\r\n              docs.creator_name = res.data.data[i].creator_name\r\n              docs.doc_id = res.data.data[i].doc_id\r\n              let flag = 0\r\n              for (let i = 0; i < this.docList.length; i++) {\r\n                if (this.docList[i].doc_id === docs.doc_id) {\r\n                  flag = 1\r\n                  break\r\n                }\r\n              }\r\n              if (!flag) { this.docList.push(docs) }\r\n              // this.$message.success(res.data.message)\r\n            }\r\n              } else {\r\n                this.$message.error(res.data.message)\r\n              }\r\n            })\r\n    },\r\n    createUML() {\r\n      router.push('/drawio')\r\n    },\r\n    CreatePage() {\r\n      this.$message.error('还没写接口哪！')\r\n    },\r\n    setPerm(item) {\r\n      this.form_setPerm.member_id = item.id\r\n      this.$axios.post('/team/set_perm', qs.stringify(this.form_setPerm))\r\n        .then((res) => {\r\n          // console.log(5)\r\n          if (res.data.result === 7) {\r\n            this.$message.success(res.data.message)\r\n          } else {\r\n            this.$message.error(res.data.message)\r\n          }\r\n          this.getMemberList()\r\n        })\r\n    },\r\n    deleteItem(item) {\r\n      if (item.id === this.form_deleteMember.user_id) {\r\n        this.$confirm('此操作将使您退出此团队' + ', 是否继续?', '提示', {\r\n          confirmButtonText: '确定',\r\n          cancelButtonText: '取消',\r\n          type: 'warning'\r\n      }).then(() => {\r\n        this.quitTeam()\r\n        }).catch(() => {\r\n          this.$message({\r\n            type: 'info',\r\n            message: '已取消操作'\r\n          })\r\n        })\r\n      } else {\r\n        this.$confirm('此操作将踢出用户成员' + item.username + ', 是否继续?', '提示', {\r\n          confirmButtonText: '确定',\r\n          cancelButtonText: '取消',\r\n          type: 'warning'\r\n      }).then(() => {\r\n        this.deleteMember(item)\r\n        }).catch(() => {\r\n          this.$message({\r\n            type: 'info',\r\n            message: '已取消操作'\r\n          })\r\n        })\r\n      }\r\n    },\r\n    handleSelectionChange(items) {\r\n      this.deleteMemberList = items\r\n    },\r\n    deleteMultiItem() {\r\n      this.$confirm('此操作将踢出您选中的所有成员, 是否继续?', '提示', {\r\n          confirmButtonText: '确定',\r\n          cancelButtonText: '取消',\r\n          type: 'warning'\r\n      }).then(() => {\r\n        for (let i = 0; i < this.deleteMemberList.length; i++) {\r\n          this.deleteMember(this.deleteMemberList[i])\r\n        }\r\n        this.getMemberList()\r\n        }).catch(() => {\r\n          this.$message({\r\n            type: 'info',\r\n            message: '已取消踢出'\r\n          })\r\n        })\r\n    },\r\n    deleteMember(item) {\r\n      this.form_deleteMember.deleted_id = item.id\r\n      // console.log(item.id)\r\n      this.$axios.post('/team/delete_member', qs.stringify(this.form_deleteMember))\r\n        .then((res) => {\r\n          // console.log(5)\r\n          if (res.data.result === 5) {\r\n            this.$message.success(res.data.message)\r\n          } else {\r\n            this.$message.error(res.data.message)\r\n          }\r\n          this.getMemberList()\r\n        })\r\n    },\r\n    quitTeam() {\r\n      this.$axios.post('/team/quit_team', qs.stringify(this.form_quitTeam))\r\n        .then((res) => {\r\n          if (res.data.result === 5) {\r\n            this.$message.success(res.data.message)\r\n          } else {\r\n            this.$message.error(res.data.message)\r\n          }\r\n          this.onGroupSpace()\r\n        })\r\n    },\r\n    onGroupSpace() {\r\n      store.toGroupSpace && store.toGroupSpace()\r\n    },\r\n    clearList() {\r\n      this.memberList = []\r\n    },\r\n    onFile() {\r\n      this.$router.push('/list/table-group-file')\r\n    },\r\n    toProject() {\r\n      this.$router.replace('/list/table-group-message')\r\n    },\r\n    createWord() {\r\n      this.$axios.post('/doc/newDoc', qs.stringify(this.form_word))\r\n         .then((res) => {\r\n           if (res.data.success) {\r\n             this.$message.success(res.data.message)\r\n             this.getDocList()\r\n           } else {\r\n             this.$message.error(res.data.message)\r\n           }\r\n         })\r\n    },\r\n    onRichTextEditor() {\r\n      store.toRichTextEditor && store.toRichTextEditor()\r\n    },\r\n    onChooseTemplate() {\r\n      store.toChooseTemplate && store.toChooseTemplate()\r\n    },\r\n    onSingleSuccess({ res }) {\r\n      if (res.status !== 200) {\r\n        this.$errorMsg(res.msg)\r\n      } else {\r\n        this.userModel = res.obj\r\n      }\r\n    },\r\n    beforeUpload(file) {\r\n      const size = file.size\r\n      if (size / 1024 > 500) {\r\n        this.$errorMsg('上传文件最大不能超过500K')\r\n        return false\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.button-style {\r\n  margin: 10px;\r\n  font-size: 14px;\r\n  font-weight: bold;\r\n  color: black;\r\n  height: 35px;\r\n}\r\n.back-button{\r\n  margin: 15px;\r\n  font-size: 12px;\r\n  font-weight: bold;\r\n  color: black;\r\n  height: 40px;\r\n  width: 50px;\r\n}\r\n.spcbutton-style {\r\n  margin: 20px;\r\n  font-size: 14px;\r\n  font-weight: bold;\r\n  color: black;\r\n  height: 35px;\r\n}\r\n.projecttitle {\r\n  font-size: 45px;\r\n  margin-left: 10px;\r\n  margin-top: 10px;\r\n  margin-bottom: 20px;\r\n  float:right;\r\n}\r\n.teamtitle {\r\n  font-size: 16px;\r\n  margin-top: 10px;\r\n  margin-bottom: 20px;\r\n}\r\n.temptablebody{\r\n  height: 500px;\r\n  width: 75%;\r\n  float: left;\r\n}\r\n.messagecss{\r\n  width: 947px;\r\n  margin: 10px;\r\n}\r\n.rightside{\r\n  float: right;\r\n  width: 23%;\r\n  margin: 10px;\r\n  height: 500px;\r\n}\r\n.rightsidefont{\r\n  font-size: 25px;\r\n  margin: 10px;\r\n}\r\n</style>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/views/list/table-group-project.vue b/src/views/list/table-group-project.vue
--- a/src/views/list/table-group-project.vue	(revision f7a7a46cf8660adc3bb17b2f9167da0370d0892e)
+++ b/src/views/list/table-group-project.vue	(date 1659633143569)
@@ -309,6 +309,7 @@
 import draggable from '@/directive/draggable'
 import store from '@/layouts/store'
 import qs from 'qs'
+import { mapActions, mapState } from 'poster/poster.vuex'
 import { getters } from '@/store/modules/user.js'
 import { state } from '@/store/modules/user.js'
 import router from '@/router'
@@ -455,6 +456,7 @@
       localStorage.setItem('axure_id', val.axure_id)
       localStorage.setItem('axure_name', val.axure_name)
       localStorage.setItem('axure_info', val.axure_info)
+      localStorage.setItem('Token', getters.getToken(state))
       this.$router.push('/posterEditor')
     },
     createAxure() {
Index: src/views/posterEditor/main/functionalBar/index.vue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><template>\r\n  <div class=\"functional-bar\">\r\n    <ul>\r\n      <li class=\"github\">\r\n        <el-tooltip\r\n          effect=\"dark\"\r\n          content=\"希望大佬们能给我点颗星⭐\"\r\n          placement=\"bottom\"\r\n          transition=\"el-zoom-in-center\"\r\n        >\r\n          <span>\r\n            <a href=\"https://github.com/a7650/h5-editor\" target=\"blank\">GitHub</a>\r\n          </span>\r\n        </el-tooltip>\r\n      </li>\r\n      <li @click=\"savePage\">\r\n        <i class=\"el-icon-upload\"></i>\r\n        <span>\r\n          <el-badge is-dot :hidden=\"!isUnsavedState\">\r\n            {{ savePageLoading ? '正在保存' : '保存页面' }}\r\n          </el-badge>\r\n        </span>\r\n      </li>\r\n      <li @click=\"closeEditor\">\r\n        <i class=\"el-icon-circle-close\"></i>\r\n        <span>关闭编辑器</span>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapActions, mapState } from 'poster/poster.vuex'\r\nexport default {\r\n  data() {\r\n    return {\r\n      savePageLoading: false\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState(['isUnsavedState', 'posterItems'])\r\n  },\r\n  methods: {\r\n    ...mapActions(['saveActivityPageConfig']),\r\n    closeEditor() {\r\n      this.$router.back()\r\n    },\r\n    savePage() {\r\n      if (this.savePageLoading) return\r\n      if (this.posterItems.length === 0) {\r\n        this.$message.error('当前画布中未添加任何元素，请添加后再提交')\r\n        return\r\n      }\r\n      this.savePageLoading = true\r\n      this.saveActivityPageConfig().finally(() => {\r\n        this.savePageLoading = false\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n.functional-bar {\r\n  background-color: #1d2024;\r\n  border-radius: 2px;\r\n  position: absolute;\r\n  top: 26px;\r\n  right: 4px;\r\n  padding: 0 10px;\r\n  box-shadow: 0 0 6px rgba($color: #000000, $alpha: 0.2);\r\n  z-index: 999;\r\n  height: 24px;\r\n  ul {\r\n    /* padding: 2px 0; */\r\n    /* height: 22px; */\r\n    height: 100%;\r\n  }\r\n  li {\r\n    user-select: none;\r\n    cursor: pointer;\r\n    height: 100%;\r\n    color: #9099a4;\r\n    float: left;\r\n    display: flex;\r\n    align-items: center;\r\n    transition: 0.2s;\r\n    font-size: 14px;\r\n    &:hover {\r\n      color: #fff;\r\n    }\r\n    &:not(:first-child) {\r\n      margin-left: 14px;\r\n    }\r\n    i {\r\n      font-size: 16px;\r\n      padding-right: 2px;\r\n    }\r\n    span {\r\n      font-size: 14px;\r\n    }\r\n  }\r\n  .github{\r\n    color: #fff;\r\n  }\r\n}\r\n</style>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/views/posterEditor/main/functionalBar/index.vue b/src/views/posterEditor/main/functionalBar/index.vue
--- a/src/views/posterEditor/main/functionalBar/index.vue	(revision f7a7a46cf8660adc3bb17b2f9167da0370d0892e)
+++ b/src/views/posterEditor/main/functionalBar/index.vue	(date 1659638419162)
@@ -31,17 +31,41 @@
 
 <script>
 import { mapActions, mapState } from 'poster/poster.vuex'
+import qs from 'qs'
 export default {
   data() {
     return {
-      savePageLoading: false
+      form_update: {
+        token: localStorage.getItem('Token'),
+        axure_id: localStorage.getItem('axure_id')
+      },
+      savePageLoading: false,
+      updatePageLoading: false
     }
   },
   computed: {
     ...mapState(['isUnsavedState', 'posterItems'])
   },
+  created() {
+    this.updatePage()
+  },
   methods: {
-    ...mapActions(['saveActivityPageConfig']),
+    ...mapActions(['saveActivityPageConfig', 'updatePageConfig']),
+    updatePage() {
+      this.$axios.post('/axure/getAxureInfo', qs.stringify(this.form_update))
+      .then(res => {
+        if (res.data.success) {
+          const pageConfig = {
+            pageConfigId: res.data.data.config_id,
+            config: res.data.data.config,
+            items: JSON.parse(res.data.data.items)
+          }
+          this.updatePageLoading = true
+          this.updatePageConfig(pageConfig)
+          this.updatePageLoading = false
+        }
+      })
+    },
     closeEditor() {
       this.$router.back()
     },
