Index: src/views/posterEditor/index.vue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><template>\r\n  <div class=\"main-container\">\r\n    <el-row style=\"background: #2f2f2f; min-height: 40px\">\r\n      <el-col :span=\"8\">\r\n        <el-button class=\"backbutton\" style=\"margin-left: 20px; margin-top: 3px\" @click=\"back\">\r\n          <i class=\"el-icon-back\" style=\"font-size: x-large\"></i>\r\n        </el-button>\r\n      </el-col>\r\n      <el-col :span=\"8\" style=\"text-align: center; margin-top: 12px\">\r\n        <div style=\"font-size: 16px; color: #ececec\" contenteditable=\"true\">\r\n          {{ axure_name }}\r\n        </div>\r\n        <div>\r\n          <!--          <el-button style=\"padding: 5px; background: #2f2f2f; border: 0\">-->\r\n          <!--            <i class=\"el-icon-more\" style=\"font-size: large; color: #ececec\"></i>-->\r\n          <!--          </el-button>-->\r\n        </div>\r\n      </el-col>\r\n    </el-row>\r\n    <div class=\"poster-editor\" :class=\"{ 'init-loading': initLoading }\">\r\n      <div class=\"base\">\r\n        <!-- 左侧添加组件栏 -->\r\n        <left-side />\r\n        <!-- 主要操作区域 -->\r\n        <main-component ref=\"main\" />\r\n        <!-- 常用功能栏 -->\r\n        <extend-side-bar />\r\n        <!-- 组件编辑区域 -->\r\n        <control-component />\r\n      </div>\r\n      <!-- 图层面板 -->\r\n      <transition name=\"el-zoom-in-top\">\r\n        <layer-panel v-show=\"layerPanelOpened\" />\r\n      </transition>\r\n    </div>\r\n    <div id=\"drag\" v-drag class=\"drag-box\">\r\n      <div class=\"boxhead\">\r\n        <i class=\"el-icon-menu\"></i>\r\n        <p>项目原型</p>\r\n      </div>\r\n      <el-table\r\n        ref=\"table\"\r\n        v-loading=\"loading\"\r\n        :data=\"axureList\"\r\n        style=\"margin-top:50px\"\r\n        @row-dblclick=\"toAxureEditor\"\r\n      >\r\n        <el-table-column\r\n          align=\"left\"\r\n          label=\"原型列表\"\r\n          prop=\"axure_name\"\r\n        />\r\n      </el-table>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapState, mapGetters, mapActions } from './poster.vuex'\r\nimport controlComponent from './control/index'\r\nimport mainComponent from './main/index'\r\nimport leftSide from './leftSide/index'\r\nimport extendSideBar from './extendSideBar'\r\nimport layerPanel from './extendSideBar/layerPanel'\r\nimport store from '@/store'\r\nimport posterModule from '@/store/modules/poster/poster'\r\nimport router from '@/router'\r\nimport qs from 'qs'\r\n\r\nconst DELETE_KEY = 8 // delete\r\nconst COPY_KEY = 67 // c\r\nconst PASTE_KEY = 86 // v\r\nconst LAYER_PANEL_KEY = 76 // l\r\nconst REFERENCE_LINE_KEY = 72 // h\r\nconst UNDO_KEY = 90 // z\r\nconst BACKUP_KEY = 83 // s\r\nconst SELECT_ALL_KEY = 65 // a\r\n\r\nexport default {\r\n  components: {\r\n    controlComponent,\r\n    mainComponent,\r\n    leftSide,\r\n    extendSideBar,\r\n    layerPanel\r\n  },\r\n  directives: {\r\n    drag: {\r\n      // 指令的定义\r\n      bind: function(el) {\r\n        const oDiv = el // 获取当前元素\r\n        oDiv.onmousedown = (e) => {\r\n          console.log('onmousedown')\r\n          // 算出鼠标相对元素的位置\r\n          const disX = e.clientX - oDiv.offsetLeft\r\n          const disY = e.clientY - oDiv.offsetTop\r\n\r\n          document.onmousemove = (e) => {\r\n            // 用鼠标的位置减去鼠标相对元素的位置，得到元素的位置\r\n            const left = e.clientX - disX\r\n            const top = e.clientY - disY\r\n\r\n            oDiv.style.left = left + 'px'\r\n            oDiv.style.top = top + 'px'\r\n          }\r\n\r\n          document.onmouseup = (e) => {\r\n            document.onmousemove = null\r\n            document.onmouseup = null\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      form_update: {\r\n        token: localStorage.getItem('Token'),\r\n        axure_id: localStorage.getItem('axure_id')\r\n      },\r\n      axure_name: localStorage.getItem('axure_name'),\r\n      pageConfig: {\r\n        pageConfigId: '',\r\n        config: '',\r\n        items: ''\r\n      },\r\n      initLoading: false,\r\n      axureList: [],\r\n      loading: false,\r\n      form_getAxureList: {\r\n        token: getters.getToken(state),\r\n        project_id: localStorage.getItem('project_id')\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState([\r\n      'posterItems',\r\n      'layerPanelOpened',\r\n      'activeItems',\r\n      'copiedWidgets',\r\n      'referenceLineOpened',\r\n      'isUnsavedState'\r\n    ]),\r\n    ...mapGetters(['activeItemIds'])\r\n  },\r\n  watch: {\r\n    pageConfig: {\r\n      handle (newName, oldName) {\r\n        console.log(\"改改改\")\r\n      },\r\n      deep: true\r\n    }\r\n  },\r\n  beforeRouteLeave(to, from, next) {\r\n      next()\r\n  },\r\n  beforeCreate() {\r\n    if (!store.hasModule('poster')) {\r\n      /** 注册poster-vuex模块 */\r\n      store.registerModule('poster', posterModule)\r\n    }\r\n  },\r\n  async created() {\r\n    this.getAxureList()\r\n    this.initLoading = true\r\n    // if (!store.hasModule('poster')) return\r\n    const loading = this.$loading({\r\n      lock: true,\r\n      text: '正在初始化编辑器',\r\n      spinner: 'el-icon-loading',\r\n      background: 'rgba(255, 255, 255, 0.6)'\r\n    })\r\n    await this.resetState()\r\n    await this.updatePage()\r\n    loading.close()\r\n    this.initLoading = false\r\n  },\r\n  async mounted() {\r\n    await this.$store.dispatch('backup/recover', null)\r\n    document.addEventListener('keydown', this.keydownHandle)\r\n    this.body = document.body\r\n    this.mainPanelRef = this.$refs.main.$refs.mainPanel\r\n    //初始化websocket\r\n    // this.initWebSocket()\r\n    // this.$nextTick(() => {\r\n    //   setInterval(this.save, 1000)\r\n    // })\r\n  },\r\n  beforeDestroy() {\r\n    document.removeEventListener('keydown', this.keydownHandle)\r\n    this.killAutoSaveTask()\r\n  },\r\n  destroyed: function () { // 离开页面生命周期函数\r\n    // this.websocketclose();\r\n  },\r\n  methods: {\r\n    getAxureList() {\r\n      this.loading = true\r\n      this.axureList = []\r\n      this.$axios.post('/axure/getAxureList', qs.stringify(this.form_getAxureList))\r\n        .then((res) => {\r\n          if (res.data.success) {\r\n            for (let i = 0; i < res.data.data.length; i++) {\r\n              const axures = {\r\n                axure_info: null,\r\n                axure_id: null,\r\n                project_id: null,\r\n                axure_name: null,\r\n                title: null,\r\n                config: null,\r\n                items: null,\r\n                last_edit: null,\r\n                create_user: null,\r\n                isFavorite: null\r\n              }\r\n              axures.axure_info = res.data.data[i].axure_info\r\n              axures.axure_id = res.data.data[i].axure_id\r\n              axures.project_id = res.data.data[i].project_id\r\n              axures.axure_name = res.data.data[i].axure_name\r\n              axures.title = res.data.data[i].title\r\n              axures.config = res.data.data[i].config\r\n              axures.items = res.data.data[i].items\r\n              axures.last_edit = res.data.data[i].last_edit\r\n              axures.create_user = res.data.data[i].create_user\r\n              axures.isFavorite = res.data.data[i].isFavorite === 1\r\n              let flag = 0\r\n              for (let i = 0; i < this.axureList.length; i++) {\r\n                if (this.axureList[i].axure_id === axures.axure_id) {\r\n                  flag = 1\r\n                  break\r\n                }\r\n              }\r\n              if (!flag) { this.axureList.push(axures) }\r\n              // this.$message.success(res.data.message)\r\n            }\r\n          } else {\r\n             // this.$message.error(res.data.message)\r\n          }\r\n           this.loading = false\r\n         })\r\n    },\r\n    toAxureEditor(val) {\r\n      localStorage.setItem('axure_id', val.axure_id)\r\n      localStorage.setItem('axure_name', val.axure_name)\r\n      localStorage.setItem('axure_info', val.axure_info)\r\n      localStorage.setItem('Token', getters.getToken(state))\r\n      this.$router.push('/redirect/posterEditor')\r\n    },\r\n    ...mapActions([\r\n      'replacePosterItems',\r\n      'replaceActiveItems',\r\n      'pasteWidget',\r\n      'copyWidget',\r\n      'setLayerPanel',\r\n      'setReferenceLineVisible',\r\n      'resetState',\r\n      'updatePageConfig'\r\n    ]),\r\n    ...mapActions({\r\n      undo: 'history/undo',\r\n      redo: 'history/redo',\r\n      backupInit: 'backup/init',\r\n      killAutoSaveTask: 'backup/killAutoSaveTask',\r\n      backupInvoker: 'backup/invoker'\r\n    }),\r\n    save() {   \r\n      /*     \r\n      const requestData = {\r\n            items: [\r\n                {\r\n                    type: poster.state.background.type,\r\n                    content: '',\r\n                    config: JSON.stringify(poster.state.background)\r\n                },\r\n                ...poster.state.posterItems.map((item, index) => {\r\n                    return {\r\n                        type: item.type,\r\n                        content: '',\r\n                        config: JSON.stringify({\r\n                            ...item,\r\n                            _sort: index + 1\r\n                        })\r\n                    }\r\n                })\r\n            ]\r\n        }\r\n        */\r\n      console.log(\"test>>>\")\r\n      // console.log(JSON.stringify(requestData))\r\n      // console.log(poster.getters.posterItems)\r\n      console.log(\"<<<test\")\r\n      const res = this.$store.dispatch('poster/saveActivityPageConfig', null)\r\n      res.then(r => {\r\n        this.websock.send(JSON.stringify({\r\n          type: \"axure\",\r\n          id: localStorage.getItem('axure_id'),\r\n          config: r.config,\r\n          items: r.items,\r\n          name: '',\r\n          content: ''\r\n      }))\r\n      })\r\n    },\r\n    back() {\r\n      router.push('/list/table-group-project')\r\n    },\r\n    // getConfig () {\r\n    //   this.$axios.post('/axure/getAxureInfo', qs.stringify(this.form_update))\r\n    //     .then(res => {\r\n    //       if (res.data.success) {\r\n    //         this.pageConfig.pageConfigId = res.data.data.config_id\r\n    //           this.pageConfig.config = JSON.parse(res.data.data.config)\r\n    //           this.pageConfig.items.JSON.parse(res.data.data.items)\r\n    //       }\r\n    //       })\r\n    //         console.log(this.pageConfig)\r\n    // },\r\n    updatePage() {\r\n      this.$axios.post('/axure/getAxureInfo', qs.stringify(this.form_update))\r\n        .then(res => {\r\n          if (res.data.success) {\r\n            let pageConfig = {}\r\n            pageConfig = {\r\n              pageConfigId: res.data.data[0].config_id,\r\n              config: JSON.parse(res.data.data[0].config),\r\n              items: JSON.parse(res.data.data[0].items),\r\n              title: res.data.data[0].title\r\n            }\r\n            this.$store.dispatch('poster/updatePageConfig', pageConfig)\r\n          }\r\n        })\r\n    },\r\n    keydownHandle(e) {\r\n      if (e.target !== this.body) {\r\n        return\r\n      }\r\n      const keyCode = e.keyCode\r\n      const ctrl = e.ctrlKey || e.metaKey\r\n      const shift = e.shiftKey\r\n      switch (true) {\r\n        case keyCode === DELETE_KEY:\r\n          if (this.activeItemIds.length > 0) {\r\n            this.replacePosterItems(\r\n              this.posterItems.filter(\r\n                item => !this.activeItemIds.includes(item.id)\r\n              )\r\n            )\r\n          }\r\n          break\r\n        case keyCode === PASTE_KEY && ctrl:\r\n          if (this.copiedWidgets) {\r\n            this.pasteWidget()\r\n          }\r\n          break\r\n        case keyCode === COPY_KEY && ctrl:\r\n          if (this.activeItems.length > 0) {\r\n            // const copiedWidgets = []\r\n            // const widgetRefs = this.mainPanelRef.$refs\r\n            // this.activeItemIds.forEach((itemId) => {\r\n            // const widgetRef = widgetRefs[itemId][0]\r\n            // copiedWidgets.push(getCopyData(widgetRef.item, widgetRef._self))\r\n            // })\r\n            const copiedWidgets = [...this.activeItems].map(item => {\r\n              item._copyFrom = 'command'\r\n              return item\r\n            })\r\n            this.copyWidget(copiedWidgets)\r\n          }\r\n          break\r\n        case keyCode === LAYER_PANEL_KEY && ctrl:\r\n          e.preventDefault()\r\n          this.setLayerPanel(!this.layerPanelOpened)\r\n          break\r\n        case keyCode === REFERENCE_LINE_KEY && ctrl:\r\n          e.preventDefault()\r\n          this.setReferenceLineVisible(!this.referenceLineOpened)\r\n          break\r\n        case keyCode === UNDO_KEY && ctrl && shift:\r\n          this.redo()\r\n          break\r\n        case keyCode === UNDO_KEY && ctrl:\r\n          this.undo()\r\n          break\r\n        case keyCode === BACKUP_KEY && ctrl:\r\n          e.preventDefault()\r\n          this.backupInvoker()\r\n          break\r\n        case keyCode === SELECT_ALL_KEY:\r\n          e.preventDefault()\r\n          this.replaceActiveItems(this.posterItems)\r\n          break\r\n        default:\r\n          break\r\n      }\r\n    }/*,\r\n    initWebSocket: function () { // 建立连接\r\n        // WebSocket与普通的请求所用协议有所不同，ws等同于http，wss等同于https\r\n        // var url = \" ws://101.42.171.88:8090/ws\"\r\n        var url = \" ws://localhost:8090/ws\"\r\n        this.websock = new WebSocket(url);\r\n        this.websock.onopen = this.websocketonopen;\r\n        // this.websock.send = this.websocketsend;\r\n        this.websock.onerror = this.websocketonerror;\r\n        this.websock.onmessage = this.websocketonmessage;\r\n        this.websock.onclose = this.websocketclose;\r\n      },\r\n    // 连接成功后调用\r\n    websocketonopen: function () {\r\n      this.websock.send(JSON.stringify({\r\n        token: getters.getToken(state),\r\n        user_id: getters.getUserId(state),\r\n        type: \"axure\",\r\n        id: localStorage.getItem('axure_id')\r\n      }))\r\n      console.log(\"WebSocket连接成功\");\r\n    },\r\n    // 发生错误时调用\r\n    websocketonerror: function () {\r\n      console.log(\"WebSocket连接发生错误\");\r\n    },\r\n    // 给后端发消息时调用\r\n    websocketsend: function () {\r\n      console.log(\"WebSocket连接发生错误\");\r\n    },\r\n    // 接收后端消息\r\n    // vue 客户端根据返回的cmd类型处理不同的业务响应\r\n    websocketonmessage: function (e) {\r\n      let pageConfig = {}\r\n      const res = JSON.parse(e.data)\r\n      // console.log(res.items)\r\n      pageConfig = {\r\n        pageConfigId: 0,\r\n        config: JSON.parse(res.config),\r\n        items: JSON.parse(res.items)\r\n      }\r\n      this.$store.dispatch('poster/updatePageConfig', pageConfig)\r\n    },\r\n    // 关闭连接时调用\r\n    websocketclose: function (e) {\r\n      console.log(\"connection closed (\" + e.code + \")\");\r\n    }*/,\r\n    sendMsg() {\r\n      // this.websock.send(JSON.stringify({\r\n      //   type: \"axure\",\r\n      //   id: localStorage.getItem('axure_id'),\r\n      //   config: this.pageConfig.config,\r\n      //   items: this.pageConfig.items,\r\n      //   config_id: this.pageConfig.pageConfigId\r\n      // }))\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n::v-deep .title {\r\n  color: #2c2c2c;\r\n  background-color: #2c2c2c;\r\n}\r\n.drag-box {\r\n  position: absolute;\r\n  top: 100px;\r\n  left: 40px;\r\n  width: 240px;\r\n  height: 600px;\r\n  background: #ffffff;\r\n  border-radius: 5px;\r\n  box-shadow: 0px 4px 12px rgba(0, 0, 0, .15);\r\n}\r\n.boxhead {\r\n  position: absolute;\r\n  top: 0px;\r\n  left: 0px;\r\n  width: 240px;\r\n  height: 40px;\r\n  background: #fffaf6;\r\n  border-radius: 5px;\r\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, .1);\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: #565656;\r\n}\r\n.backbutton {\r\n  color: white;\r\n  background: #2c2c2c;\r\n  height: 30px;\r\n  border: 0;\r\n  margin-top: 5px;\r\n  padding: 5px;\r\n}\r\n.backbutton:hover {\r\n  color: white;\r\n  background: #000000;\r\n  height: 35px;\r\n}\r\n.backbutton:focus {\r\n  color: white;\r\n  background: #000000;\r\n  height: 35px;\r\n}\r\n.head {\r\n  background: #2c2c2c;\r\n  min-height: 5%;\r\n}\r\n.poster-editor {\r\n  width: 100%;\r\n  min-width: 900px;\r\n  height: 96%;\r\n  background-color: #fff;\r\n  position: fixed;\r\n  &.init-loading {\r\n    filter: blur(6px);\r\n  }\r\n  .base {\r\n    width: 100%;\r\n    height: 100%;\r\n    position: relative;\r\n    display: flex;\r\n  }\r\n  .left-side {\r\n    height: 100%;\r\n  }\r\n  .poster-editor-main {\r\n    flex: 1;\r\n    height: 100%;\r\n    box-sizing: border-box;\r\n  }\r\n  .extend-side-bar {\r\n    width: 50px;\r\n    height: 100%;\r\n    border-left: 1px solid $colorBorder;\r\n  }\r\n  .poster-editor-control {\r\n    width: 200px;\r\n    height: 100%;\r\n    box-sizing: border-box;\r\n    border-left: 1px solid $colorBorder;\r\n  }\r\n}\r\n</style>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/views/posterEditor/index.vue b/src/views/posterEditor/index.vue
--- a/src/views/posterEditor/index.vue	(revision 0a4e3b01463860ad0934658b8cc8868013ed01b0)
+++ b/src/views/posterEditor/index.vue	(date 1660110757590)
@@ -264,8 +264,8 @@
       killAutoSaveTask: 'backup/killAutoSaveTask',
       backupInvoker: 'backup/invoker'
     }),
-    save() {   
-      /*     
+    save() {
+      /*
       const requestData = {
             items: [
                 {
@@ -314,6 +314,7 @@
     //           this.pageConfig.items.JSON.parse(res.data.data.items)
     //       }
     //       })
+    //
     //         console.log(this.pageConfig)
     // },
     updatePage() {
