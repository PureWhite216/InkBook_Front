Index: src/views/posterEditor/index.vue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><template>\r\n  <div class=\"main-container\" style=\"font-family: 等线\">\r\n    <el-row style=\"background: #2f2f2f; min-height: 40px\">\r\n      <el-col :span=\"8\">\r\n        <el-button class=\"backbutton\" style=\"margin-left: 20px; margin-top: 3px\" @click=\"back\">\r\n          <i class=\"el-icon-back\" style=\"font-size: x-large\"></i>\r\n        </el-button>\r\n      </el-col>\r\n      <el-col :span=\"8\" style=\"text-align: center; margin-top: 12px\">\r\n        <div style=\"font-size: 16px; color: #ececec\" contenteditable=\"true\">\r\n          {{ axure_name }}\r\n        </div>\r\n        <div>\r\n          <!--          <el-button style=\"padding: 5px; background: #2f2f2f; border: 0\">-->\r\n          <!--            <i class=\"el-icon-more\" style=\"font-size: large; color: #ececec\"></i>-->\r\n          <!--          </el-button>-->\r\n        </div>\r\n      </el-col>\r\n    </el-row>\r\n    <el-dialog title=\"创建原型\" :visible.sync=\"dialogPageVisible\">\r\n      <el-form :model=\"form_createAxure\">\r\n        <el-form-item label=\"原型名称\" :label-width=\"formLabelWidth\">\r\n          <el-input v-model=\"form_createAxure.axure_name\" autocomplete=\"off\" />\r\n        </el-form-item>\r\n        <el-form-item label=\"原型简介（可不填）\" :label-width=\"formLabelWidth\">\r\n          <el-input v-model=\"form_createAxure.axure_info\" autocomplete=\"off\" />\r\n        </el-form-item>\r\n      </el-form>\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"dialogPageVisible = false; form_createAxure.axure_name = '' \">取消</el-button>\r\n        <el-button @click=\"createAxure(), form_createAxure.axure_name = '',dialogPageVisible = false\">空模板创建</el-button>\r\n      </div>\r\n      <el-row>\r\n        <el-col v-for=\"(o, index) in 4\" :key=\"o\" :span=\"8\" :offset=\"index > 0 ? 2 : 0\">\r\n          <el-card :body-style=\"{ padding: '0px' }\">\r\n            <div style=\"padding: 14px;\">\r\n              <span v-if=\"index === 0\">登录模板</span>\r\n              <div class=\"bottom clearfix\">\r\n                <el-button type=\"text\" class=\"button\" @click=\"flag=index+1, toPreview()\">预览</el-button>\r\n                <el-button type=\"text\" class=\"button\" @click=\"form_createAxure.axure_template_id = index + 1, createAxure(), dialogPageVisible = false\">创建</el-button>\r\n              </div>\r\n            </div>\r\n          </el-card>\r\n        </el-col>\r\n      </el-row>\r\n    </el-dialog>\r\n    <el-dialog title=\"修改原型信息\" :visible.sync=\"dialogUpdateAxureInfoVisible\">\r\n      <el-form :model=\"form_updateAxureInfo\">\r\n        <el-form-item label=\"原型新名称\" :label-width=\"formLabelWidth\">\r\n          <el-input v-model=\"form_updateAxureInfo.axure_name\" autocomplete=\"off\" />\r\n        </el-form-item>\r\n        <el-form-item label=\"原型新简介（可不填）\" :label-width=\"formLabelWidth\">\r\n          <el-input v-model=\"form_updateAxureInfo.axure_info\" autocomplete=\"off\" />\r\n        </el-form-item>\r\n      </el-form>\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"dialogUpdateAxureInfoVisible = false, form_updateAxureInfo.axure_name = '',form_updateAxureInfo.axure_info = ''\">取 消</el-button>\r\n        <el-button @click=\"updateAxureInfo(), dialogUpdateAxureInfoVisible = false\">确 定</el-button>\r\n      </div>\r\n    </el-dialog>\r\n    <div class=\"poster-editor\" :class=\"{ 'init-loading': initLoading }\">\r\n      <div class=\"base\">\r\n        <!-- 左侧添加组件栏 -->\r\n        <left-side />\r\n        <!-- 主要操作区域 -->\r\n        <main-component ref=\"main\" />\r\n        <!-- 常用功能栏 -->\r\n        <extend-side-bar />\r\n        <!-- 组件编辑区域 -->\r\n        <control-component />\r\n      </div>\r\n      <!-- 图层面板 -->\r\n      <transition name=\"el-zoom-in-top\">\r\n        <layer-panel v-show=\"layerPanelOpened\" />\r\n      </transition>\r\n    </div>\r\n    <div id=\"drag\" v-drag:#drag class=\"drag-box\">\r\n      <div>\r\n        <el-button icon=\"el-icon-circle-plus-outline\" circle style=\"float:right\" @click=\"dialogPageVisible = true\" />\r\n      </div>\r\n      <el-table\r\n        ref=\"table\"\r\n        v-loading=\"loading\"\r\n        :data=\"axureList\"\r\n        style=\"margin-top:0px\"\r\n        header-cell-style=\"color: #000000\"\r\n        @row-dblclick=\"toAxureEditor\"\r\n      >\r\n        <el-table-column\r\n          align=\"left\"\r\n          label=\"页面\"\r\n          prop=\"axure_name\"\r\n        />\r\n        <el-table-column\r\n          align=\"center\"\r\n          width=\"100\"\r\n        >\r\n          <template slot-scope=\"scope\">\r\n            <el-dropdown trigger=\"click\" @command=\"onCommad\">\r\n              <div class=\"action-wrapper\">\r\n                <span class=\"nick-name el-dropdown-link\">\r\n                  <i class=\"el-icon-more\"></i>\r\n                </span>\r\n              </div>\r\n              <el-dropdown-menu slot=\"dropdown\">\r\n                <el-dropdown-item icon=\"el-icon-edit-outline\" command=\"personalCenter\">\r\n                  <el-button type=\"text\" @click=\"form_updateAxureInfo.axure_id = scope.row.axure_id, dialogUpdateAxureInfoVisible = true\">重命名</el-button>\r\n                </el-dropdown-item>\r\n                <el-dropdown-item icon=\"el-icon-switch-button\" command=\"logout\">\r\n                  <el-button type=\"text\" @click=\"deleteAxure(scope.row)\">删除原型</el-button>\r\n                </el-dropdown-item>\r\n              </el-dropdown-menu>\r\n            </el-dropdown>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapState, mapGetters, mapActions } from './poster.vuex'\r\nimport controlComponent from './control/index'\r\nimport mainComponent from './main/index'\r\nimport leftSide from './leftSide/index'\r\nimport extendSideBar from './extendSideBar'\r\nimport layerPanel from './extendSideBar/layerPanel'\r\nimport store from '@/store'\r\nimport posterModule from '@/store/modules/poster/poster'\r\nimport router from '@/router'\r\nimport qs from 'qs'\r\nimport { getters } from '@/store/modules/user.js'\r\nimport { state } from '@/store/modules/user.js'\r\nimport { drag } from 'poster/poster.directives'\r\n\r\nconst DELETE_KEY = 8 // delete\r\nconst COPY_KEY = 67 // c\r\nconst PASTE_KEY = 86 // v\r\nconst LAYER_PANEL_KEY = 76 // l\r\nconst REFERENCE_LINE_KEY = 72 // h\r\nconst UNDO_KEY = 90 // z\r\nconst BACKUP_KEY = 83 // s\r\nconst SELECT_ALL_KEY = 65 // a\r\n\r\nexport default {\r\n  components: {\r\n    controlComponent,\r\n    mainComponent,\r\n    leftSide,\r\n    extendSideBar,\r\n    layerPanel\r\n  },\r\n  directives: { drag },\r\n  data() {\r\n    return {\r\n      flag: '',\r\n      form_update: {\r\n        token: localStorage.getItem('Token'),\r\n        axure_id: localStorage.getItem('axure_id')\r\n      },\r\n      axure_name: localStorage.getItem('axure_name'),\r\n      pageConfig: {\r\n        pageConfigId: '',\r\n        config: '',\r\n        items: ''\r\n      },\r\n      form_createAxure: {\r\n        token: getters.getToken(state),\r\n        axure_name: null,\r\n        axure_info: null,\r\n        project_id: localStorage.getItem('project_id'),\r\n        axure_template_id: 0\r\n      },\r\n      form_updateAxureInfo: {\r\n        token: getters.getToken(state),\r\n        axure_id: null,\r\n        axure_name: null,\r\n        axure_info: null\r\n      },\r\n      form_deleteAxure: {\r\n        token: getters.getToken(state),\r\n        axure_id: null\r\n      },\r\n      initLoading: false,\r\n      dialogPageVisible: false,\r\n      dialogUpdateAxureInfoVisible: false,\r\n      axureList: [],\r\n      loading: false,\r\n      form_getAxureList: {\r\n        token: getters.getToken(state),\r\n        project_id: localStorage.getItem('project_id')\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState([\r\n      'posterItems',\r\n      'layerPanelOpened',\r\n      'activeItems',\r\n      'copiedWidgets',\r\n      'referenceLineOpened',\r\n      'isUnsavedState'\r\n    ]),\r\n    ...mapGetters(['activeItemIds'])\r\n  },\r\n  watch: {\r\n    pageConfig: {\r\n      handle (newName, oldName) {\r\n        console.log('改改改')\r\n      },\r\n      deep: true\r\n    }\r\n  },\r\n  beforeRouteLeave(to, from, next) {\r\n      next()\r\n  },\r\n  beforeCreate() {\r\n    if (!store.hasModule('poster')) {\r\n      /** 注册poster-vuex模块 */\r\n      store.registerModule('poster', posterModule)\r\n    }\r\n  },\r\n  async created() {\r\n    this.getAxureList()\r\n    this.initLoading = true\r\n    // if (!store.hasModule('poster')) return\r\n    const loading = this.$loading({\r\n      lock: true,\r\n      text: '正在初始化编辑器',\r\n      spinner: 'el-icon-loading',\r\n      background: 'rgba(255, 255, 255, 0.6)'\r\n    })\r\n    await this.resetState()\r\n    await this.nothing()\r\n    // await this.updatePage()\r\n    loading.close()\r\n    this.initLoading = false\r\n  },\r\n  async mounted() {\r\n    await this.$store.dispatch('backup/recover', null)\r\n    document.addEventListener('keydown', this.keydownHandle)\r\n    this.body = document.body\r\n    this.mainPanelRef = this.$refs.main.$refs.mainPanel\r\n    // 初始化websocket\r\n    // this.initWebSocket()\r\n    // this.$nextTick(() => {\r\n    //   setInterval(this.save, 1000)\r\n    // })\r\n  },\r\n  beforeDestroy() {\r\n    document.removeEventListener('keydown', this.keydownHandle)\r\n    this.killAutoSaveTask()\r\n  },\r\n  destroyed: function () { // 离开页面生命周期函数\r\n    // this.websocketclose();\r\n  },\r\n  methods: {\r\n    toPreview() {\r\n      if (this.flag === 1) {\r\n        window.open('http://101.42.171.88:8090/file/1/2022-08-10_17:50:41.606_dcc3626135d50ed9d2c3c52a7a8678c.jpg')\r\n      }\r\n    },\r\n    createAxure() {\r\n      this.$axios.post('/axure/create', qs.stringify(this.form_createAxure))\r\n        .then((res) => {\r\n          if (res.data.success) {\r\n            this.$message.success(res.data.message)\r\n            this.getAxureList()\r\n          } else {\r\n            this.$message.error(res.data.message)\r\n          }\r\n        })\r\n    },\r\n    updateAxureInfo() {\r\n      this.$axios.post('/axure/updateInfo', qs.stringify(this.form_updateAxureInfo))\r\n        .then((res) => {\r\n          // console.log(5)\r\n          if (res.data.success) {\r\n            this.$message.success(res.data.message)\r\n            this.getAxureList()\r\n          } else {\r\n            this.$message.error(res.data.message)\r\n          }\r\n        })\r\n    },\r\n    getAxureList() {\r\n      this.loading = true\r\n      this.axureList = []\r\n      this.$axios.post('/axure/getAxureList', qs.stringify(this.form_getAxureList))\r\n        .then((res) => {\r\n          if (res.data.success) {\r\n            for (let i = 0; i < res.data.data.length; i++) {\r\n              const axures = {\r\n                axure_info: null,\r\n                axure_id: null,\r\n                project_id: null,\r\n                axure_name: null,\r\n                title: null,\r\n                config: null,\r\n                items: null,\r\n                last_edit: null,\r\n                create_user: null,\r\n                isFavorite: null\r\n              }\r\n              axures.axure_info = res.data.data[i].axure_info\r\n              axures.axure_id = res.data.data[i].axure_id\r\n              axures.project_id = res.data.data[i].project_id\r\n              axures.axure_name = res.data.data[i].axure_name\r\n              axures.title = res.data.data[i].title\r\n              axures.config = res.data.data[i].config\r\n              axures.items = res.data.data[i].items\r\n              axures.last_edit = res.data.data[i].last_edit\r\n              axures.create_user = res.data.data[i].create_user\r\n              axures.isFavorite = res.data.data[i].isFavorite === 1\r\n              let flag = 0\r\n              for (let i = 0; i < this.axureList.length; i++) {\r\n                if (this.axureList[i].axure_id === axures.axure_id) {\r\n                  flag = 1\r\n                  break\r\n                }\r\n              }\r\n              if (!flag) { this.axureList.push(axures) }\r\n              // this.$message.success(res.data.message)\r\n            }\r\n          } else {\r\n             // this.$message.error(res.data.message)\r\n          }\r\n           this.loading = false\r\n         })\r\n    },\r\n    deleteAxure(item) {\r\n      this.$confirm('此操作将使您删除此原型' + ', 是否继续?', '提示', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n      }).then(() => {\r\n        this.form_deleteAxure.axure_id = item.axure_id\r\n        this.$axios.post('/axure/delete', qs.stringify(this.form_deleteAxure))\r\n          .then((res) => {\r\n            // console.log(5)\r\n            if (res.data.success) {\r\n              this.$message.success(res.data.message)\r\n              this.getAxureList()\r\n            } else {\r\n              this.$message.error(res.data.message)\r\n            }\r\n          })\r\n      }).catch(() => {\r\n        this.$message({\r\n          type: 'info',\r\n          message: '已取消操作'\r\n        })\r\n      })\r\n    },\r\n    toAxureEditor(val) {\r\n      localStorage.setItem('axure_id', val.axure_id)\r\n      localStorage.setItem('axure_name', val.axure_name)\r\n      localStorage.setItem('axure_info', val.axure_info)\r\n      localStorage.setItem('Token', getters.getToken(state))\r\n      this.$router.push('/redirect/posterEditor')\r\n    },\r\n    ...mapActions([\r\n      'replacePosterItems',\r\n      'replaceActiveItems',\r\n      'pasteWidget',\r\n      'copyWidget',\r\n      'setLayerPanel',\r\n      'setReferenceLineVisible',\r\n      'resetState',\r\n      'updatePageConfig'\r\n    ]),\r\n    ...mapActions({\r\n      undo: 'history/undo',\r\n      redo: 'history/redo',\r\n      backupInit: 'backup/init',\r\n      killAutoSaveTask: 'backup/killAutoSaveTask',\r\n      backupInvoker: 'backup/invoker'\r\n    }),\r\n    save() {\r\n      /*\r\n      const requestData = {\r\n            items: [\r\n                {\r\n                    type: poster.state.background.type,\r\n                    content: '',\r\n                    config: JSON.stringify(poster.state.background)\r\n                },\r\n                ...poster.state.posterItems.map((item, index) => {\r\n                    return {\r\n                        type: item.type,\r\n                        content: '',\r\n                        config: JSON.stringify({\r\n                            ...item,\r\n                            _sort: index + 1\r\n                        })\r\n                    }\r\n                })\r\n            ]\r\n        }\r\n        */\r\n      console.log('test>>>')\r\n      // console.log(JSON.stringify(requestData))\r\n      // console.log(poster.getters.posterItems)\r\n      console.log('<<<test')\r\n      const res = this.$store.dispatch('poster/saveActivityPageConfig', null)\r\n      res.then(r => {\r\n        this.websock.send(JSON.stringify({\r\n          type: 'axure',\r\n          id: localStorage.getItem('axure_id'),\r\n          config: r.config,\r\n          items: r.items,\r\n          name: '',\r\n          content: ''\r\n      }))\r\n      })\r\n    },\r\n    back() {\r\n      router.push('/list/table-group-project')\r\n    },\r\n    // getConfig () {\r\n    //   this.$axios.post('/axure/getAxureInfo', qs.stringify(this.form_update))\r\n    //     .then(res => {\r\n    //       if (res.data.success) {\r\n    //         this.pageConfig.pageConfigId = res.data.data.config_id\r\n    //           this.pageConfig.config = JSON.parse(res.data.data.config)\r\n    //           this.pageConfig.items.JSON.parse(res.data.data.items)\r\n    //       }\r\n    //       })\r\n    //\r\n    //         console.log(this.pageConfig)\r\n    // },\r\n    nothing() {\r\n      this.$store.dispatch('poster/nothing')\r\n    },\r\n    updatePage() {\r\n      this.$axios.post('/axure/getAxureInfo', qs.stringify(this.form_update))\r\n        .then(res => {\r\n          if (res.data.success) {\r\n            let pageConfig = {}\r\n            pageConfig = {\r\n              pageConfigId: res.data.data[0].config_id,\r\n              config: JSON.parse(res.data.data[0].config),\r\n              items: JSON.parse(res.data.data[0].items),\r\n              title: res.data.data[0].title\r\n            }\r\n            this.$store.dispatch('poster/updatePageConfig', pageConfig)\r\n          }\r\n        })\r\n    },\r\n    keydownHandle(e) {\r\n      if (e.target !== this.body) {\r\n        return\r\n      }\r\n      const keyCode = e.keyCode\r\n      const ctrl = e.ctrlKey || e.metaKey\r\n      const shift = e.shiftKey\r\n      switch (true) {\r\n        case keyCode === DELETE_KEY:\r\n          if (this.activeItemIds.length > 0) {\r\n            this.replacePosterItems(\r\n              this.posterItems.filter(\r\n                item => !this.activeItemIds.includes(item.id)\r\n              )\r\n            )\r\n          }\r\n          break\r\n        case keyCode === PASTE_KEY && ctrl:\r\n          if (this.copiedWidgets) {\r\n            this.pasteWidget()\r\n          }\r\n          break\r\n        case keyCode === COPY_KEY && ctrl:\r\n          if (this.activeItems.length > 0) {\r\n            // const copiedWidgets = []\r\n            // const widgetRefs = this.mainPanelRef.$refs\r\n            // this.activeItemIds.forEach((itemId) => {\r\n            // const widgetRef = widgetRefs[itemId][0]\r\n            // copiedWidgets.push(getCopyData(widgetRef.item, widgetRef._self))\r\n            // })\r\n            const copiedWidgets = [...this.activeItems].map(item => {\r\n              item._copyFrom = 'command'\r\n              return item\r\n            })\r\n            this.copyWidget(copiedWidgets)\r\n          }\r\n          break\r\n        case keyCode === LAYER_PANEL_KEY && ctrl:\r\n          e.preventDefault()\r\n          this.setLayerPanel(!this.layerPanelOpened)\r\n          break\r\n        case keyCode === REFERENCE_LINE_KEY && ctrl:\r\n          e.preventDefault()\r\n          this.setReferenceLineVisible(!this.referenceLineOpened)\r\n          break\r\n        // case keyCode === UNDO_KEY && ctrl && shift:\r\n        //   this.redo()\r\n        //   break\r\n        // case keyCode === UNDO_KEY && ctrl:\r\n        //   this.undo()\r\n        //   break\r\n        case keyCode === BACKUP_KEY && ctrl:\r\n          e.preventDefault()\r\n          this.backupInvoker()\r\n          break\r\n        case keyCode === SELECT_ALL_KEY:\r\n          e.preventDefault()\r\n          this.replaceActiveItems(this.posterItems)\r\n          break\r\n        default:\r\n          break\r\n      }\r\n    }, /*,    initWebSocket: function () { // 建立连接\r\n        // WebSocket与普通的请求所用协议有所不同，ws等同于http，wss等同于https\r\n        // var url = \" ws://101.42.171.88:8090/ws\"\r\n        var url = \" ws://localhost:8090/ws\"\r\n        this.websock = new WebSocket(url);\r\n        this.websock.onopen = this.websocketonopen;\r\n        // this.websock.send = this.websocketsend;\r\n        this.websock.onerror = this.websocketonerror;\r\n        this.websock.onmessage = this.websocketonmessage;\r\n        this.websock.onclose = this.websocketclose;\r\n      },\r\n    // 连接成功后调用\r\n    websocketonopen: function () {\r\n      this.websock.send(JSON.stringify({\r\n        token: getters.getToken(state),\r\n        user_id: getters.getUserId(state),\r\n        type: \"axure\",\r\n        id: localStorage.getItem('axure_id')\r\n      }))\r\n      console.log(\"WebSocket连接成功\");\r\n    },\r\n    // 发生错误时调用\r\n    websocketonerror: function () {\r\n      console.log(\"WebSocket连接发生错误\");\r\n    },\r\n    // 给后端发消息时调用\r\n    websocketsend: function () {\r\n      console.log(\"WebSocket连接发生错误\");\r\n    },\r\n    // 接收后端消息\r\n    // vue 客户端根据返回的cmd类型处理不同的业务响应\r\n    websocketonmessage: function (e) {\r\n      let pageConfig = {}\r\n      const res = JSON.parse(e.data)\r\n      // console.log(res.items)\r\n      pageConfig = {\r\n        pageConfigId: 0,\r\n        config: JSON.parse(res.config),\r\n        items: JSON.parse(res.items)\r\n      }\r\n      this.$store.dispatch('poster/updatePageConfig', pageConfig)\r\n    },\r\n    // 关闭连接时调用\r\n    websocketclose: function (e) {\r\n      console.log(\"connection closed (\" + e.code + \")\");\r\n    }*/\r\n    sendMsg() {\r\n      // this.websock.send(JSON.stringify({\r\n      //   type: \"axure\",\r\n      //   id: localStorage.getItem('axure_id'),\r\n      //   config: this.pageConfig.config,\r\n      //   items: this.pageConfig.items,\r\n      //   config_id: this.pageConfig.pageConfigId\r\n      // }))\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n::v-deep .title {\r\n  color: #2c2c2c;\r\n  background-color: #2c2c2c;\r\n}\r\n.drag-box {\r\n  position: absolute;\r\n  top: 45%;\r\n  left: 2.8%;\r\n  width: 195px;\r\n  height: 400px;\r\n  background: #ececec;\r\n  border-radius: 5px;\r\n  box-shadow: 0px 4px 12px rgba(0, 0, 0, .15);\r\n}\r\n.boxhead {\r\n  position: absolute;\r\n  top: 0px;\r\n  left: 0px;\r\n  width: 240px;\r\n  height: 40px;\r\n  background: #fffaf6;\r\n  border-radius: 5px;\r\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, .1);\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: #565656;\r\n}\r\n.backbutton {\r\n  color: white;\r\n  background: #2c2c2c;\r\n  height: 30px;\r\n  border: 0;\r\n  margin-top: 5px;\r\n  padding: 5px;\r\n}\r\n.backbutton:hover {\r\n  color: white;\r\n  background: #000000;\r\n  height: 35px;\r\n}\r\n.backbutton:focus {\r\n  color: white;\r\n  background: #000000;\r\n  height: 35px;\r\n}\r\n.head {\r\n  background: #2c2c2c;\r\n  min-height: 5%;\r\n}\r\n.poster-editor {\r\n  width: 100%;\r\n  min-width: 900px;\r\n  height: 96%;\r\n  background-color: #fff;\r\n  position: fixed;\r\n  &.init-loading {\r\n    filter: blur(6px);\r\n  }\r\n  .base {\r\n    width: 100%;\r\n    height: 100%;\r\n    position: relative;\r\n    display: flex;\r\n  }\r\n  .left-side {\r\n    height: 100%;\r\n  }\r\n  .poster-editor-main {\r\n    flex: 1;\r\n    height: 100%;\r\n    box-sizing: border-box;\r\n  }\r\n  .extend-side-bar {\r\n    width: 50px;\r\n    height: 100%;\r\n    border-left: 1px solid $colorBorder;\r\n  }\r\n  .poster-editor-control {\r\n    width: 200px;\r\n    height: 100%;\r\n    box-sizing: border-box;\r\n    border-left: 1px solid $colorBorder;\r\n  }\r\n}\r\n</style>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/views/posterEditor/index.vue b/src/views/posterEditor/index.vue
--- a/src/views/posterEditor/index.vue	(revision c9d45597ce627ca9dd50714686749bdaa8a708d5)
+++ b/src/views/posterEditor/index.vue	(date 1660149513328)
@@ -237,6 +237,7 @@
     this.initLoading = false
   },
   async mounted() {
+    await this.reloaded()
     await this.$store.dispatch('backup/recover', null)
     document.addEventListener('keydown', this.keydownHandle)
     this.body = document.body
@@ -417,6 +418,12 @@
     back() {
       router.push('/list/table-group-project')
     },
+    reloaded() {
+      if (location.href.indexOf("#reloaded") == -1) {
+        location.href = location.href + "#reloaded"
+        window.location.reload()
+      }
+    },
     // getConfig () {
     //   this.$axios.post('/axure/getAxureInfo', qs.stringify(this.form_update))
     //     .then(res => {
Index: src/store/modules/poster/poster.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import * as MTS from './poster.mutations'\r\n// import { Message } from 'element-ui'\r\nimport { Widget, BackgroundWidget, CopiedWidget } from 'poster/widgetConstructor'\r\nimport { arrMoveTop, arrMoveUpper, arrMoveLower, arrMoveBottom } from 'poster/utils'\r\n// import { isPlainObject } from '@/utils'\r\nimport { isPlainObject } from 'lodash'\r\nimport _set from 'lodash/set'\r\nimport { changeCompositionPositionHandler } from './helpers'\r\nimport history from './history'\r\nimport backup from './backup'\r\n// import { addActivityPageConfig } from '@/api/activity'\r\nimport { Message } from 'element-ui'\r\nimport qs from 'qs'\r\nimport axios from 'axios'\r\nimport { addItem } from '@/model/BaseModel'\r\nimport * as gts from '@/store/modules/user.js'\r\nimport * as sta from '@/store/modules/user.js'\r\nimport store from '@/store'\r\nimport RectWidget from '@/views/posterEditor/widgetConstructor/rectWidget'\r\n\r\nfunction getState() {\r\n    const state = {\r\n        activityId: '',\r\n        pageConfigId: '',\r\n        pageTitle: '',\r\n        canvasSize: {\r\n            width: 338,\r\n            height: 600\r\n        },\r\n        canvasPosition: {\r\n            top: null,\r\n            left: null\r\n        },\r\n        background: null,\r\n        posterItems: [], // 组件列表\r\n        activeItems: [], // 当前选中的组件\r\n        assistWidgets: [], // 辅助组件\r\n        layerPanelOpened: true, // 是否打开图层面板\r\n        referenceLineOpened: true, // 是否打开参考线\r\n        copiedWidgets: null, // 当前复制的组件 WidgetItem[]\r\n        referenceLine: { // 参考线,用户定义的参考线\r\n            row: [],\r\n            col: []\r\n        },\r\n        matchedLine: null, // 匹配到的参考线 {row:[],col:[]}\r\n        mainPanelScrollY: 0,\r\n        isUnsavedState: false // 是否处于未保存状态\r\n    }\r\n    return state\r\n}\r\n\r\nconst state = getState()\r\n\r\nvar cv_item = null\r\n\r\nvar url = ' ws://101.42.171.88:8090/ws'\r\n// var url = \" ws://localhost:8090/ws\"\r\nconst websock = new WebSocket(url)\r\n\r\nfunction initWebSocket () { // 建立连接\r\n    // WebSocket与普通的请求所用协议有所不同，ws等同于http，wss等同于https\r\n    websock.onopen = websocketonopen\r\n    // this.websock.send = this.websocketsend;\r\n    websock.onerror = websocketonerror\r\n    websock.onmessage = websocketonmessage\r\n    websock.onclose = websocketclose\r\n}\r\n\r\ninitWebSocket()\r\n\r\n// 连接成功后调用\r\nfunction websocketonopen () {\r\n    websock.send(JSON.stringify({\r\n    token: gts.getters.getToken(sta.state),\r\n    user_id: gts.getters.getUserId(sta.state),\r\n    type: 'axure',\r\n    id: localStorage.getItem('axure_id')\r\n    }))\r\n    console.log('WebSocket连接成功')\r\n}\r\n// 发生错误时调用\r\nfunction websocketonerror () {\r\n    console.log('WebSocket连接发生错误')\r\n}\r\n\r\nvar isInit = false\r\n\r\n// 接收后端消息\r\n// vue 客户端根据返回的cmd类型处理不同的业务响应\r\nfunction websocketonmessage (e) {\r\n    const res = JSON.parse(e.data)\r\n    // console.log(res)\r\n    if (res.op == 'add') {\r\n        store.dispatch('poster/synAddItem', JSON.parse(res.item))\r\n    } else if (res.op == 'drag') {\r\n        store.dispatch('poster/synUpdateDragInfo', JSON.parse(res.item))\r\n    } else if (res.op == 'update') {\r\n        store.dispatch('poster/synUpdateWidgetState', JSON.parse(res.item))\r\n    } else if (res.op == 'copy') {\r\n        store.dispatch('poster/synPasteWidget', JSON.parse(res.item))\r\n    } else if (res.op == 'replace') {\r\n        store.dispatch('poster/synReplacePosterItems', JSON.parse(res.item))\r\n    } else if (res.op == 'bg') {\r\n        store.dispatch('poster/synAddBackground', JSON.parse(res.item))\r\n    } else if (res.op == 'send_syn') {\r\n        store.dispatch('poster/synActivityPageConfig')\r\n    } else if (res.op == 'syn') {\r\n        if (!isInit) {\r\n            store.dispatch('poster/synUpdatePageConfig', JSON.parse(res.item))\r\n            isInit = true\r\n        }\r\n    } else if (res.op == 'origin') {\r\n        store.dispatch('poster/initPageConfig')\r\n        isInit = true\r\n    } else if (res.op == 'canvas') {\r\n        store.dispatch('poster/synSetCanvasSize', JSON.parse(res.item))\r\n        store.dispatch('poster/seekBackgroundSize')\r\n    }\r\n}\r\n// 关闭连接时调用\r\nfunction websocketclose (e) {\r\n    alert('您已离线，请刷新页面或重新登陆！')\r\n    console.log('connection closed (' + e.code + ')')\r\n}\r\n\r\n// window.setInterval(print, 1000)\r\n\r\nfunction print(state) {\r\n    console.log(state)\r\n}\r\n\r\nconst getters = {\r\n    posterItemIds(state, getters) {\r\n        return state.posterItems.map(item => item.id)\r\n    },\r\n    activeItemIds(state) {\r\n        return state.activeItems.map(item => item.id)\r\n    },\r\n    canvasSize(state) {\r\n        return state.canvasSize\r\n    },\r\n    activityId(state) {\r\n        return state.activityId\r\n    }\r\n}\r\n\r\nconst mutations = {\r\n    [MTS.SET_ACTIVITY_ID](state, id) {\r\n        state.activityId = id\r\n    },\r\n    [MTS.SET_PAGE_CONFIG_ID](state, id) {\r\n        state.pageConfigId = id\r\n    },\r\n    [MTS.SET_PAGE_TITLE](state, title) {\r\n        state.pageTitle = title\r\n        state.isUnsavedState = true\r\n    },\r\n    'SET_SCROLL_Y'(state, y) {\r\n        state.mainPanelScrollY = y\r\n    },\r\n    [MTS.SET_CANVAS_POSITION](state, data) {\r\n        state.canvasPosition = data\r\n    },\r\n    [MTS.ADD_BACKGROUND](state, item) {\r\n        if (item instanceof BackgroundWidget) {\r\n            state.background = item\r\n        }\r\n    },\r\n    [MTS.SYN_ADD_BACKGROUND](state, item) {\r\n        state.background = item\r\n    },\r\n    [MTS.REMOVE_BACKGROUND](state) {\r\n        state.background = new BackgroundWidget()\r\n    },\r\n    [MTS.SET_BACKGROUND_CONFIG](state, cb) {\r\n        if (state.background) {\r\n            cb(state.background)\r\n        }\r\n    },\r\n    // 添加组件\r\n    [MTS.ADD_ITEM](state, item) {\r\n        if (item instanceof Widget) {\r\n            state.posterItems.push(item)\r\n        }\r\n    },\r\n    // 添加同步组件\r\n    [MTS.SYN_ADD_ITEM](state, item) {\r\n        state.posterItems.push(item)\r\n    },\r\n    // 删除组件\r\n    [MTS.REMOVE_ITEM](state, item) {\r\n        if (item.lock) {\r\n            return\r\n        }\r\n        state.posterItems = state.posterItems.filter(i => i.id !== item.id)\r\n    },\r\n    // 替换所有items\r\n    [MTS.REPLACE_POSTER_ITEMS](state, items) {\r\n        state.posterItems = items\r\n    },\r\n    // 添加选中的组件\r\n    [MTS.ADD_ACTIVE_ITEM](state, item) {\r\n        if (item.lock || !item.visible || !item.couldAddToActive) {\r\n            return\r\n        }\r\n        state.activeItems.push(item)\r\n    },\r\n    // 取消选中\r\n    [MTS.REMOVE_ACTIVE_ITEM](state, item) {\r\n        state.activeItems = state.activeItems.filter(i => i.id !== item.id)\r\n    },\r\n    // 替换选中的组件\r\n    [MTS.REPLACE_ACTIVE_ITEMS](state, items) {\r\n        state.activeItems = items.filter(i => (!i.lock) && i.couldAddToActive)\r\n    },\r\n    // 添加辅助组件\r\n    [MTS.ADD_ASSIST_WIDGET](state, item) {\r\n        state.assistWidgets.push(item)\r\n    },\r\n    // 删除辅助组件\r\n    [MTS.REMOVE_ASSIST_WIDGET](state, item) {\r\n        state.assistWidgets = state.assistWidgets.filter(i => i.id !== item.id)\r\n    },\r\n    // 替换辅助组件\r\n    [MTS.REPLACE_ASSIST_WIDGETS](state, items) {\r\n        state.assistWidgets = items\r\n    },\r\n    // 设置图层面板的打开关闭状态\r\n    [MTS.SET_LAYER_PANEL](state, flag) {\r\n        state.layerPanelOpened = !!flag\r\n    },\r\n    // 设置参考线的可见状态\r\n    [MTS.SET_REFERENCE_LINE_VISIBLE](state, flag) {\r\n        state.referenceLineOpened = !!flag\r\n    },\r\n    // 设置某个组件的data\r\n    [MTS.SET_WIDGET_CONFIG](state, { item, cb }) {\r\n        const target = state.posterItems.find(i => i.id === item.id)\r\n        if (target && cb) {\r\n            cb(target)\r\n        }\r\n    },\r\n    // 复制组件\r\n    [MTS.COPY_WIDGET](state, item) {\r\n        const items = Array.isArray(item) ? item : [item]\r\n        const finalItems = items\r\n            .filter(i => i && i.replicable)\r\n            .map(i => {\r\n                i._copyCount = 0\r\n                return i\r\n            })\r\n        state.copiedWidgets = finalItems.length > 0 ? finalItems : null\r\n        cv_item = state.copiedWidgets\r\n    },\r\n    // 粘贴组件\r\n    [MTS.PASTE_WIDGET](state) {\r\n        const copiedWidgets = state.copiedWidgets\r\n        if (copiedWidgets && copiedWidgets.length > 0) {\r\n            copiedWidgets.forEach(item => {\r\n                state.posterItems.push(new CopiedWidget(item))\r\n            })\r\n        }\r\n    },\r\n    // 粘贴组件\r\n    [MTS.SYN_PASTE_WIDGET](state, items) {\r\n        if (items && items.length > 0) {\r\n            items.forEach(item => {\r\n                state.posterItems.push(new CopiedWidget(item))\r\n            })\r\n        }\r\n    },\r\n    // 添加参考线\r\n    [MTS.ADD_REFERENCE_LINE](state, { type, position }) {\r\n        state.referenceLine[type].push(position)\r\n    },\r\n    // 删除参考线\r\n    [MTS.REMOVE_REFERENCE_LINE](state, { type, index }) {\r\n        state.referenceLine[type].splice(index, 1)\r\n    },\r\n    // 清空参考线\r\n    [MTS.REMOVE_ALL_REFERENCE_LINE](state) {\r\n        state.referenceLine = {\r\n            row: [],\r\n            col: []\r\n        }\r\n    },\r\n    [MTS.SET_MATCHED_LINE](state, data) {\r\n        state.matchedLine = data\r\n    },\r\n    [MTS.REMOVE_MATCHED_LINE](state) {\r\n        state.matchedLine = null\r\n    },\r\n    [MTS.SET_UNSAVED_STATE](state, flag = false) {\r\n        state.isUnsavedState = flag\r\n    }\r\n\r\n}\r\n\r\nconst actions = {\r\n    resetState({ state, dispatch }) {\r\n        return new Promise((resolve) => {\r\n            for (const [key, val] of Object.entries(getState())) {\r\n                state[key] = val\r\n            }\r\n            dispatch('backup/resetState')\r\n            dispatch('history/resetState')\r\n            setTimeout(() => {\r\n                resolve()\r\n            }, 500)\r\n        })\r\n    },\r\n    setUnsavedState({ commit }, flag) {\r\n        commit(MTS.SET_UNSAVED_STATE, flag)\r\n    },\r\n    setCanvasSize({ state, dispatch }, data) {\r\n        // dispatch('history/push')\r\n        websock.send(JSON.stringify({\r\n            'type': 'axure',\r\n            'id': localStorage.getItem('axure_id'),\r\n            'op': 'canvas',\r\n            'item': JSON.stringify(data)\r\n        }))\r\n        state.canvasSize = data\r\n    },\r\n    synSetCanvasSize({ state, dispatch }, data) {\r\n        // dispatch('history/push')\r\n        state.canvasSize = data\r\n    },\r\n    addBackground({ state, commit, dispatch }, item) {\r\n        websock.send(JSON.stringify({\r\n            'type': 'axure',\r\n            'id': localStorage.getItem('axure_id'),\r\n            'op': 'bg',\r\n            'item': JSON.stringify(item)\r\n        }))\r\n        if (state.background) {\r\n            dispatch('history/push')\r\n        }\r\n        commit(MTS.ADD_BACKGROUND, item)\r\n    },\r\n    synAddBackground({ state, commit, dispatch }, item) {\r\n        commit(MTS.SYN_ADD_BACKGROUND, item)\r\n    },\r\n    removeBackground({ commit, dispatch }) {\r\n        dispatch('history/push')\r\n        commit(MTS.REMOVE_BACKGROUND)\r\n    },\r\n    setBackgroundConfig({ state, commit, dispatch }, cb) {\r\n        dispatch('history/push')\r\n        commit(MTS.SET_BACKGROUND_CONFIG, cb)\r\n    },\r\n    seekBackgroundSize({ state }) {\r\n        const background = state.background\r\n        if (background && background.wState.isSolid) {\r\n            background.dragInfo.w = state.canvasSize.width\r\n            background.dragInfo.h = state.canvasSize.height\r\n        }\r\n    },\r\n    addItem({ commit, dispatch, state }, item) {\r\n        websock.send(JSON.stringify({\r\n            'type': 'axure',\r\n            'id': localStorage.getItem('axure_id'),\r\n            'op': 'add',\r\n            'item': JSON.stringify(item)\r\n        }))\r\n        const widgetCountLimit = parseInt(item._widgetCountLimit)\r\n        if (widgetCountLimit) {\r\n            const currentCount = (state.posterItems.filter(i => i.type === item.type)).length\r\n            if (currentCount >= widgetCountLimit) {\r\n                Message.error(`<${item.typeLabel || item.type}>类型的组件最多有${widgetCountLimit}个`)\r\n                return\r\n            }\r\n        }\r\n        if (item instanceof Widget) {\r\n            dispatch('history/push')\r\n            if (!(item instanceof CopiedWidget)) {\r\n                commit(MTS.REPLACE_ACTIVE_ITEMS, [item])\r\n            }\r\n            commit(MTS.ADD_ITEM, item)\r\n        }\r\n    },\r\n    // 同步添加组件\r\n    synAddItem({ commit, dispatch, state }, item) {\r\n        // console.log('I am synAdd.')\r\n        const widgetCountLimit = parseInt(item._widgetCountLimit)\r\n        if (widgetCountLimit) {\r\n            const currentCount = (state.posterItems.filter(i => i.type === item.type)).length\r\n            if (currentCount >= widgetCountLimit) {\r\n                Message.error(`<${item.typeLabel || item.type}>类型的组件最多有${widgetCountLimit}个`)\r\n                return\r\n            }\r\n        }\r\n        dispatch('history/push')\r\n        commit(MTS.SYN_ADD_ITEM, item)\r\n    },\r\n    removeItem({ commit, getters, dispatch }, item) {\r\n        if (item.lock) {\r\n            return\r\n        }\r\n        if (getters.activeItemIds.includes(item.id)) {\r\n            commit(MTS.REMOVE_ACTIVE_ITEM, item)\r\n        }\r\n        dispatch('history/push')\r\n        commit(MTS.REMOVE_ITEM, item)\r\n    },\r\n    replacePosterItems({ commit, dispatch }, items) {\r\n        websock.send(JSON.stringify({\r\n            'type': 'axure',\r\n            'id': localStorage.getItem('axure_id'),\r\n            'op': 'replace',\r\n            'item': JSON.stringify(items)\r\n        }))\r\n        dispatch('history/push')\r\n        commit(MTS.REPLACE_POSTER_ITEMS, items)\r\n        commit(MTS.REPLACE_ACTIVE_ITEMS, [])\r\n    },\r\n    synReplacePosterItems({ commit, dispatch }, items) {\r\n        commit(MTS.REPLACE_POSTER_ITEMS, items)\r\n    },\r\n    addActiveItem({ commit, getters, dispatch }, item) {\r\n        if (getters.activeItemIds.includes(item.id)) {\r\n            return\r\n        }\r\n        commit(MTS.ADD_ACTIVE_ITEM, item)\r\n    },\r\n    removeActiveItem({ commit, dispatch }, item) {\r\n        commit(MTS.REMOVE_ACTIVE_ITEM, item)\r\n    },\r\n    replaceActiveItems({ commit }, items) {\r\n        commit(MTS.REPLACE_ACTIVE_ITEMS, items)\r\n    },\r\n    addAssistWidget({ commit }, item) {\r\n        // dispatch('history/push')\r\n        commit(MTS.ADD_ASSIST_WIDGET, item)\r\n    },\r\n    removeAssistWidget({ commit }, item) {\r\n        // dispatch('history/push')\r\n        commit(MTS.REMOVE_ASSIST_WIDGET, item)\r\n    },\r\n    replaceAssistWidgets({ commit }, items) {\r\n        // dispatch('history/push')\r\n        commit(MTS.REPLACE_ASSIST_WIDGETS, items)\r\n    },\r\n    selectAllItems({ commit, state }) {\r\n        commit(MTS.REPLACE_ACTIVE_ITEMS, state.posterItems)\r\n    },\r\n    setLayerPanel({ commit }, flag) {\r\n        commit(MTS.SET_LAYER_PANEL, flag)\r\n    },\r\n    updateBackgroundDragInfo({ state }, dragInfo) {\r\n        state.background.dragInfo = Object.assign({}, state.background.dragInfo, dragInfo)\r\n    },\r\n    // 更新组件位置、大小等\r\n    updateDragInfo({ state }, { dragInfo, widgetId, updateSelfOnly = false }) {\r\n        const widgetItem = state.posterItems.find(i => i.id === widgetId)\r\n        if (!widgetItem) {\r\n            return\r\n        }\r\n        // if (isMoving) {\r\n        const preDragInfo = widgetItem.dragInfo\r\n        const activeItems = state.activeItems\r\n        websock.send(JSON.stringify({\r\n            'type': 'axure',\r\n            'id': localStorage.getItem('axure_id'),\r\n            'op': 'drag',\r\n            'item': JSON.stringify({ dragInfo, widgetId, updateSelfOnly, activeItems })\r\n        }))\r\n        dragInfo = Object.assign({}, preDragInfo, dragInfo)\r\n        if (updateSelfOnly) {\r\n            widgetItem.dragInfo = Object.assign({}, widgetItem.dragInfo, dragInfo)\r\n        } else if (activeItems.length > 0) {\r\n            const diffDragInfo = {\r\n                w: dragInfo.w - preDragInfo.w,\r\n                h: dragInfo.h - preDragInfo.h,\r\n                x: dragInfo.x - preDragInfo.x,\r\n                y: dragInfo.y - preDragInfo.y,\r\n                rotateZ: dragInfo.rotateZ - preDragInfo.rotateZ\r\n            }\r\n            activeItems.forEach(item => {\r\n                const { x, y, w, h, rotateZ } = item.dragInfo\r\n                item.dragInfo = {\r\n                    x: x + diffDragInfo.x,\r\n                    y: y + diffDragInfo.y,\r\n                    w: w + diffDragInfo.w,\r\n                    h: h + diffDragInfo.h,\r\n                    rotateZ: rotateZ + diffDragInfo.rotateZ\r\n                }\r\n            })\r\n        }\r\n        // } else {\r\n        //     widgetItem.dragInfo = Object.assign({}, widgetItem.dragInfo, dragInfo)\r\n        // }\r\n    },\r\n    // 同步更新组件位置、大小等\r\n    synUpdateDragInfo({ state }, { dragInfo, widgetId, updateSelfOnly, activeItems }) {\r\n        // console.log('I am synDrag.')\r\n        const widgetItem = state.posterItems.find(i => i.id === widgetId)\r\n        if (!widgetItem) {\r\n            return\r\n        }\r\n        // if (isMoving) {\r\n        const preDragInfo = widgetItem.dragInfo\r\n        const localItems = state.posterItems\r\n        const synItems = activeItems.map(item => item.id)\r\n        dragInfo = Object.assign({}, preDragInfo, dragInfo)\r\n        if (updateSelfOnly) {\r\n            widgetItem.dragInfo = Object.assign({}, widgetItem.dragInfo, dragInfo)\r\n        } else if (activeItems.length > 0) {\r\n            const diffDragInfo = {\r\n                w: dragInfo.w - preDragInfo.w,\r\n                h: dragInfo.h - preDragInfo.h,\r\n                x: dragInfo.x - preDragInfo.x,\r\n                y: dragInfo.y - preDragInfo.y,\r\n                rotateZ: dragInfo.rotateZ - preDragInfo.rotateZ\r\n            }\r\n            localItems.forEach(item => {\r\n                if (synItems.indexOf(item.id) > -1) {\r\n                    const { x, y, w, h, rotateZ } = item.dragInfo\r\n                    item.dragInfo = {\r\n                        x: x + diffDragInfo.x,\r\n                        y: y + diffDragInfo.y,\r\n                        w: w + diffDragInfo.w,\r\n                        h: h + diffDragInfo.h,\r\n                        rotateZ: rotateZ + diffDragInfo.rotateZ\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        // } else {\r\n        //     widgetItem.dragInfo = Object.assign({}, widgetItem.dragInfo, dragInfo)\r\n        // }\r\n    },\r\n    // 更新组件state\r\n    updateWidgetState({ state, dispatch }, { keyPath, value, widgetId, pushHistory = true }) {\r\n        websock.send(JSON.stringify({\r\n            'type': 'axure',\r\n            'id': localStorage.getItem('axure_id'),\r\n            'op': 'update',\r\n            'item': JSON.stringify({ keyPath, value, widgetId, pushHistory })\r\n        }))\r\n\r\n        const widgetItem = state.posterItems.find(i => i.id === widgetId)\r\n        if (widgetItem) {\r\n            // 某些操作不添加进历史记录栈\r\n            if (pushHistory) {\r\n                dispatch('history/push')\r\n            }\r\n            _set(widgetItem.wState, keyPath, value)\r\n        }\r\n    },\r\n    // 同步更新组件state\r\n    synUpdateWidgetState({ state, dispatch }, { keyPath, value, widgetId, pushHistory = true }) {\r\n        const widgetItem = state.posterItems.find(i => i.id === widgetId)\r\n        if (widgetItem) {\r\n            // 某些操作不添加进历史记录栈\r\n            if (pushHistory) {\r\n                dispatch('history/push')\r\n            }\r\n            _set(widgetItem.wState, keyPath, value)\r\n        }\r\n    },\r\n    // 更改组合的位置\r\n    changeCompositionPosition({ state, dispatch }, type) {\r\n        const activeItems = state.activeItems\r\n        dispatch('history/push')\r\n        /**\r\n         * @sideEffect\r\n         */\r\n        changeCompositionPositionHandler(activeItems, type, state.canvasSize)\r\n    },\r\n    setWidgetConfig({ commit }, { item, cb }) {\r\n        commit(MTS.SET_WIDGET_CONFIG, { item, cb })\r\n    },\r\n    lockItem({ commit, getters }, item) {\r\n        if (getters.activeItemIds.includes(item.id)) {\r\n            commit(MTS.REMOVE_ACTIVE_ITEM, item)\r\n        }\r\n        commit(MTS.SET_WIDGET_CONFIG, { item, cb: (i) => (i.lock = true) })\r\n    },\r\n    unlockItem({ commit }, item) {\r\n        commit(MTS.SET_WIDGET_CONFIG, { item, cb: (i) => (i.lock = false) })\r\n    },\r\n    toggleItemVisible({ commit }, { item, visible }) {\r\n        commit(MTS.SET_WIDGET_CONFIG, { item, cb: (i) => (i.visible = !!visible) })\r\n    },\r\n    widgetMoveToTop({ commit, state, dispatch }, item) {\r\n        dispatch('history/push')\r\n        commit(\r\n            MTS.REPLACE_POSTER_ITEMS,\r\n            arrMoveBottom(state.posterItems, state.posterItems.findIndex(i => i.id === item.id))\r\n        )\r\n    },\r\n    widgetMoveToUpper({ commit, state, dispatch }, item) {\r\n        dispatch('history/push')\r\n        commit(\r\n            MTS.REPLACE_POSTER_ITEMS,\r\n            arrMoveLower(state.posterItems, state.posterItems.findIndex(i => i.id === item.id))\r\n        )\r\n    },\r\n    widgetMoveToLower({ commit, state, dispatch }, item) {\r\n        dispatch('history/push')\r\n        commit(\r\n            MTS.REPLACE_POSTER_ITEMS,\r\n            arrMoveUpper(state.posterItems, state.posterItems.findIndex(i => i.id === item.id))\r\n        )\r\n    },\r\n    widgetMoveToBottom({ commit, state, dispatch }, item) {\r\n        dispatch('history/push')\r\n        commit(\r\n            MTS.REPLACE_POSTER_ITEMS,\r\n            arrMoveTop(state.posterItems, state.posterItems.findIndex(i => i.id === item.id))\r\n        )\r\n    },\r\n    copyWidget({ commit }, item) {\r\n        commit(MTS.COPY_WIDGET, item)\r\n    },\r\n    pasteWidget({ commit, dispatch }) {\r\n        // console.log(JSON.stringify(cv_item))\r\n        websock.send(JSON.stringify({\r\n            'type': 'axure',\r\n            'id': localStorage.getItem('axure_id'),\r\n            'op': 'copy',\r\n            'item': JSON.stringify(cv_item)\r\n        }))\r\n        dispatch('history/push')\r\n        commit(MTS.PASTE_WIDGET)\r\n    },\r\n    synPasteWidget({ commit, dispatch }, item) {\r\n        commit(MTS.SYN_PASTE_WIDGET, item)\r\n    },\r\n    addReferenceLine({ commit, dispatch }, item) {\r\n        dispatch('history/push')\r\n        commit(MTS.ADD_REFERENCE_LINE, item)\r\n    },\r\n    removeReferenceLine({ commit, dispatch }, item) {\r\n        dispatch('history/push')\r\n        commit(MTS.REMOVE_REFERENCE_LINE, item)\r\n    },\r\n    removeAllReferenceLine({ commit, dispatch }) {\r\n        dispatch('history/push')\r\n        commit(MTS.REMOVE_ALL_REFERENCE_LINE)\r\n    },\r\n    setReferenceLineVisible({ commit }, flag) {\r\n        commit(MTS.SET_REFERENCE_LINE_VISIBLE, flag)\r\n    },\r\n    setMatchedLine({ commit }, data) {\r\n        commit(MTS.SET_MATCHED_LINE, data)\r\n    },\r\n    removeMatchedLine({ commit }) {\r\n        commit(MTS.REMOVE_MATCHED_LINE)\r\n    },\r\n    /**\r\n     * 更新当前页面配置\r\n     * 参数pageConfig是从后台获取到的页面配置信息\r\n     */\r\n    updatePageConfig({ dispatch, state, commit }, pageConfig) {\r\n      // console.log(pageConfig)\r\n        let recoverData = {}\r\n        if (!pageConfig || !isPlainObject(pageConfig)) {\r\n            commit(MTS.SET_PAGE_CONFIG_ID, '')\r\n            recoverData = {\r\n                background: new BackgroundWidget(),\r\n                posterItems: [],\r\n                referenceLine: getState().referenceLine\r\n            }\r\n        } else {\r\n            commit(MTS.SET_PAGE_CONFIG_ID, pageConfig.pageConfigId)\r\n            const baseConfig = pageConfig.config\r\n            const posterItems = pageConfig.items\r\n            let background\r\n            try {\r\n                const backgroundItem = posterItems.splice(\r\n                    posterItems.findIndex(i => i.type === 'background'), 1\r\n                )[0]\r\n                if (backgroundItem) {\r\n                    background = JSON.parse(backgroundItem.config)\r\n                }\r\n            } catch (e) {\r\n                console.error(e)\r\n                background = new BackgroundWidget()\r\n            }\r\n            const defaultState = getState()\r\n            recoverData = {\r\n                background,\r\n                posterItems: posterItems.map(item => JSON.parse(item.config)),\r\n                referenceLine: baseConfig.referenceLine || defaultState.referenceLine,\r\n                canvasSize: baseConfig.canvasSize || defaultState.canvasSize,\r\n                pageTitle: pageConfig.title || ''\r\n            }\r\n        }\r\n      // console.log(recoverData)\r\n        dispatch('backup/recover', recoverData)\r\n        commit(MTS.SET_UNSAVED_STATE, false)\r\n    },\r\n    /**\r\n     * 同步当前页面配置\r\n     * 参数pageConfig是从后台获取到的页面配置信息\r\n     */\r\n    synUpdatePageConfig({ dispatch, state, commit }, pageConfig) {\r\n        let recoverData = {}\r\n        if (!pageConfig || !isPlainObject(pageConfig)) {\r\n            commit(MTS.SET_PAGE_CONFIG_ID, '')\r\n            recoverData = {\r\n                background: new BackgroundWidget(),\r\n                posterItems: [],\r\n                referenceLine: getState().referenceLine\r\n            }\r\n        } else {\r\n            commit(MTS.SET_PAGE_CONFIG_ID, pageConfig.pageConfigId)\r\n            const baseConfig = pageConfig.config\r\n            const posterItems = pageConfig.items\r\n            let background\r\n            try {\r\n                const backgroundItem = posterItems.splice(\r\n                    posterItems.findIndex(i => i.type === 'background'), 1\r\n                )[0]\r\n                if (backgroundItem) {\r\n                    background = JSON.parse(backgroundItem.config)\r\n                }\r\n            } catch (e) {\r\n                console.error(e)\r\n                background = new BackgroundWidget()\r\n            }\r\n            const defaultState = getState()\r\n            recoverData = {\r\n                background,\r\n                posterItems: posterItems.map(item => JSON.parse(item.config)),\r\n                referenceLine: baseConfig.referenceLine || defaultState.referenceLine,\r\n                canvasSize: baseConfig.canvasSize || defaultState.canvasSize,\r\n                pageTitle: pageConfig.title || ''\r\n            }\r\n        }\r\n      // console.log(recoverData)\r\n       dispatch('backup/recover', recoverData)\r\n       commit(MTS.SET_UNSAVED_STATE, false)\r\n    },\r\n    /**\r\n     * 保存/新增当前的活动页配置\r\n     */\r\n    saveActivityPageConfig({ state, commit, rootGetters }) {\r\n        const requestData = {\r\n            title: state.pageTitle,\r\n            // baseConfig\r\n            config: JSON.stringify({\r\n                referenceLine: state.referenceLine,\r\n                canvasSize: state.canvasSize\r\n            }),\r\n            items: [\r\n                {\r\n                    type: state.background.type,\r\n                    content: '',\r\n                    config: JSON.stringify(state.background)\r\n                },\r\n                ...state.posterItems.map((item, index) => {\r\n                    return {\r\n                        type: item.type,\r\n                        content: '',\r\n                        config: JSON.stringify({\r\n                            ...item,\r\n                            _sort: index + 1\r\n                        })\r\n                    }\r\n                })\r\n            ]\r\n        }\r\n      const form_saveAxure = {\r\n        token: localStorage.getItem('Token'),\r\n        axure_id: localStorage.getItem('axure_id'),\r\n        title: requestData['title'],\r\n        items: JSON.stringify(requestData['items']),\r\n        config: requestData['config']\r\n      }\r\n      // console.log(form_saveAxure)\r\n     axios.post('/axure/update', qs.stringify(form_saveAxure))\r\n        .then(res => {\r\n            Message.success('保存成功')\r\n            return res\r\n          },\r\n          () => {\r\n            Message.error('保存失败')\r\n            return Promise.reject()\r\n          }\r\n        )\r\n        return form_saveAxure\r\n    },\r\n    /**\r\n     * 当只有一位编辑者时，从数据库获得数据\r\n     */\r\n    initPageConfig ({ dispatch, state, commit }) {\r\n        axios.post('/axure/getAxureInfo', qs.stringify({\r\n            token: localStorage.getItem('Token'),\r\n            axure_id: localStorage.getItem('axure_id')\r\n          }))\r\n        .then(res => {\r\n          if (res.data.success) {\r\n            let pageConfig = {}\r\n            pageConfig = {\r\n              pageConfigId: res.data.data[0].config_id,\r\n              config: JSON.parse(res.data.data[0].config),\r\n              items: JSON.parse(res.data.data[0].items),\r\n              title: res.data.data[0].title\r\n            }\r\n            dispatch('updatePageConfig', pageConfig)\r\n          }\r\n        })\r\n    },\r\n    /**\r\n     * 同步当前的活动页配置\r\n     */\r\n    synActivityPageConfig({ state, commit, rootGetters }) {\r\n        const requestData = {\r\n            title: state.pageTitle,\r\n            // baseConfig\r\n            config: JSON.stringify({\r\n                referenceLine: state.referenceLine,\r\n                canvasSize: state.canvasSize\r\n            }),\r\n            items: [\r\n                {\r\n                    type: state.background.type,\r\n                    content: '',\r\n                    config: JSON.stringify(state.background)\r\n                },\r\n                ...state.posterItems.map((item, index) => {\r\n                    return {\r\n                        type: item.type,\r\n                        content: '',\r\n                        config: JSON.stringify({\r\n                            ...item,\r\n                            _sort: index + 1\r\n                        })\r\n                    }\r\n                })\r\n            ]\r\n        }\r\n        websock.send(JSON.stringify({\r\n            'type': 'axure',\r\n            'id': localStorage.getItem('axure_id'),\r\n            'op': 'syn',\r\n            'item': JSON.stringify(requestData)\r\n        }))\r\n    },\r\n    nothing({ dispatch, state, commit }) {\r\n\r\n    }\r\n}\r\n\r\nexport default {\r\n    namespaced: true,\r\n    state,\r\n    getters,\r\n    mutations,\r\n    actions,\r\n    modules: {\r\n        history,\r\n        backup\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/store/modules/poster/poster.js b/src/store/modules/poster/poster.js
--- a/src/store/modules/poster/poster.js	(revision c9d45597ce627ca9dd50714686749bdaa8a708d5)
+++ b/src/store/modules/poster/poster.js	(date 1660149513328)
@@ -322,6 +322,16 @@
         }))
         state.canvasSize = data
     },
+    synSetCanvasSize({ state, dispatch }, data) {
+        // dispatch('history/push')
+        websock.send(JSON.stringify({
+            'type': 'axure',
+            'id': localStorage.getItem('axure_id'),
+            'op': 'canvas',
+            'item': JSON.stringify(data)
+        }))
+        state.canvasSize = data
+    },
     synSetCanvasSize({ state, dispatch }, data) {
         // dispatch('history/push')
         state.canvasSize = data
@@ -615,7 +625,7 @@
         commit(MTS.COPY_WIDGET, item)
     },
     pasteWidget({ commit, dispatch }) {
-        // console.log(JSON.stringify(cv_item))
+        // // console.log(JSON.stringify(cv_item))
         websock.send(JSON.stringify({
             'type': 'axure',
             'id': localStorage.getItem('axure_id'),
@@ -654,7 +664,7 @@
      * 参数pageConfig是从后台获取到的页面配置信息
      */
     updatePageConfig({ dispatch, state, commit }, pageConfig) {
-      // console.log(pageConfig)
+      // // console.log(pageConfig)
         let recoverData = {}
         if (!pageConfig || !isPlainObject(pageConfig)) {
             commit(MTS.SET_PAGE_CONFIG_ID, '')
